<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PengˇBlog</title>
  
  <subtitle>学习，生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liupeng.world/"/>
  <updated>2019-11-18T02:56:15.395Z</updated>
  <id>http://liupeng.world/</id>
  
  <author>
    <name>peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python的包，模块及作用域</title>
    <link href="http://liupeng.world/2019/11/18/Python%E7%9A%84%E5%8C%85%EF%BC%8C%E6%A8%A1%E5%9D%97/"/>
    <id>http://liupeng.world/2019/11/18/Python的包，模块/</id>
    <published>2019-11-18T02:54:00.000Z</published>
    <updated>2019-11-18T02:56:15.395Z</updated>
    
    <content type="html"><![CDATA[<p>简单写写~<br><a id="more"></a></p><h3 id="工程的组织结构"><a href="#工程的组织结构" class="headerlink" title="工程的组织结构"></a>工程的组织结构</h3><blockquote><p>包 》模块 》类 》函数，变量</p></blockquote><h3 id="包与模块"><a href="#包与模块" class="headerlink" title="包与模块"></a>包与模块</h3><blockquote><p>包从物理意义上来说就是文件夹(文件夹下面需要包含__init__.py)</p><p>模块就是.py文件</p></blockquote><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>相对应的目录结构~就不贴图了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python文件夹下demo.py文件</span></span><br><span class="line"><span class="comment"># 模块的内置属性(这个是只对外导出提供A,B)</span></span><br><span class="line">__all__=[<span class="string">'A'</span>,<span class="string">'B'</span>]</span><br><span class="line">A = <span class="number">1</span></span><br><span class="line">B = <span class="number">2</span></span><br><span class="line">C = <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import python.dome as ti</span></span><br><span class="line"><span class="comment"># print(ti.A)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from python.dome import A</span></span><br><span class="line"><span class="comment"># print(A)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from python import dome</span></span><br><span class="line"><span class="comment"># print(dome.A)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> python.dome <span class="keyword">import</span> *</span><br><span class="line">print(A)</span><br><span class="line">print(B)</span><br><span class="line">print(C)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行无法写下代码的方式~ 不过一行最好不要超过 80个字符</span></span><br><span class="line"><span class="comment"># from python.dome import A,\</span></span><br><span class="line"><span class="comment"># B</span></span><br><span class="line"><span class="comment"># print(B)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from python.dome import (A,</span></span><br><span class="line"><span class="comment"># B)</span></span><br><span class="line"><span class="comment"># print(B)</span></span><br></pre></td></tr></table></figure><h3 id="init-py的使用"><a href="#init-py的使用" class="headerlink" title="__init__.py的使用"></a>__init__.py的使用</h3><blockquote><p>每个包文件夹下都有一个__init__.py文件</p></blockquote><p>__init__.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包时的必定的首次执行</span></span><br><span class="line"><span class="comment"># a = 'This __init__.py file'</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制可以导出的模块</span></span><br><span class="line"><span class="comment">#__all__=['dome1']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化包</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> io</span><br></pre></td></tr></table></figure><p>使用文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导包必定执行 __init__.py</span></span><br><span class="line"><span class="comment"># import python    __init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用__init__.py进行导出包限制</span></span><br><span class="line"><span class="comment"># from python import *</span></span><br><span class="line"><span class="comment"># print(dome1.E)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用__init__.py初始化导包</span></span><br><span class="line"><span class="keyword">import</span> python</span><br><span class="line">print(python.sys.path)</span><br></pre></td></tr></table></figure><h3 id="包和模块的常见错误"><a href="#包和模块的常见错误" class="headerlink" title="包和模块的常见错误"></a>包和模块的常见错误</h3><blockquote><p>包和模块是不会被重复导入</p><p>避免循环导入</p><p>导入模块的时候，所导入的模块会执行一遍代码</p></blockquote><h3 id="模块的内置变量"><a href="#模块的内置变量" class="headerlink" title="模块的内置变量"></a>模块的内置变量</h3><blockquote><p>双下划线变量，系统内置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印当前模块的所有变量</span></span><br><span class="line">infos = dir()</span><br><span class="line">print(infos)</span><br></pre></td></tr></table></figure><blockquote><p>常用的系统内置变量</p><p>__name__    非入口文件：包名+模块名     入口文件：__main__</p><p>__package__    非入口文件：包名              入口文件：无</p><p>__doc__    模块的文档说明</p><p>__file__    入口文件：磁盘上的绝对路径    非入口文件：当前文件名            </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 入口文件</span></span><br><span class="line">print(<span class="string">'name:'</span> + __name__)</span><br><span class="line">print(<span class="string">'package:'</span> + (__package__ <span class="keyword">or</span> <span class="string">'当前模块不属于任何包'</span>))</span><br><span class="line">print(<span class="string">'doc:'</span> + (__doc__ <span class="keyword">or</span> <span class="string">'当前模块无文档注释'</span> ) )</span><br><span class="line">print(<span class="string">'file:'</span> + __file__)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">name:__main__</span><br><span class="line">package:当前模块不属于任何包</span><br><span class="line">doc:当前模块无文档注释</span><br><span class="line">file:f:/Python学习/PythonProject/Python3/demo11.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非入口文件</span></span><br><span class="line"><span class="comment"># demo1.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    我是注释</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="string">'name:'</span> + __name__)</span><br><span class="line">print(<span class="string">'package:'</span> + (__package__ <span class="keyword">or</span> <span class="string">'当前模块不属于任何包'</span>))</span><br><span class="line">print(<span class="string">'doc:'</span> + (__doc__ <span class="keyword">or</span> <span class="string">'当前模块无文档注释'</span> ) )</span><br><span class="line">print(<span class="string">'file:'</span> + __file__)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非入口文件</span></span><br><span class="line"><span class="keyword">import</span> python.dome1</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">name:python.dome1</span><br><span class="line">package:python</span><br><span class="line">doc:</span><br><span class="line">    我是注释</span><br><span class="line"></span><br><span class="line">file:f:\Python学习\PythonProject\Python3\python\dome1.py</span><br></pre></td></tr></table></figure><h3 id="相对导入"><a href="#相对导入" class="headerlink" title="相对导入"></a>相对导入</h3><blockquote><p>相对导入（子模块引入时可用 . .. …） 入口文件不能使用</p></blockquote><h3 id="绝对导入"><a href="#绝对导入" class="headerlink" title="绝对导入"></a>绝对导入</h3><blockquote><p>绝对导入（以入口文件为顶级目录）</p></blockquote><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">temp</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span>    </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h4 id="for循环不算单独的作用域"><a href="#for循环不算单独的作用域" class="headerlink" title="for循环不算单独的作用域"></a>for循环不算单独的作用域</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">temp2</span><span class="params">(b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> b:</span><br><span class="line">        print(c)</span><br><span class="line">        d = <span class="number">4</span></span><br><span class="line">    print(d)</span><br><span class="line">temp2(b)</span><br></pre></td></tr></table></figure><h4 id="global使变量升级为全局变量"><a href="#global使变量升级为全局变量" class="headerlink" title="global使变量升级为全局变量"></a>global使变量升级为全局变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">temp3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">temp3()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单写写~&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://liupeng.world/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liupeng.world/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数</title>
    <link href="http://liupeng.world/2019/11/08/Python%E5%87%BD%E6%95%B0/"/>
    <id>http://liupeng.world/2019/11/08/Python函数/</id>
    <published>2019-11-08T06:49:00.000Z</published>
    <updated>2019-11-08T06:50:52.798Z</updated>
    
    <content type="html"><![CDATA[<p>简单认识Python函数~<br><a id="more"></a></p><h3 id="认识函数"><a href="#认识函数" class="headerlink" title="认识函数"></a>认识函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.123456</span></span><br><span class="line">print(round(a,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="查找函数的用法"><a href="#查找函数的用法" class="headerlink" title="查找函数的用法"></a>查找函数的用法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = help(round)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h4 id="python之禅"><a href="#python之禅" class="headerlink" title="python之禅"></a>python之禅</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python this</span><br></pre></td></tr></table></figure><h4 id="函数的好处"><a href="#函数的好处" class="headerlink" title="函数的好处"></a>函数的好处</h4><blockquote><p>功能性</p><p>隐藏细节</p><p>避免编写重复代码</p><p>自定义函数</p></blockquote><h3 id="函数的定义及运行特点"><a href="#函数的定义及运行特点" class="headerlink" title="函数的定义及运行特点"></a>函数的定义及运行特点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcname</span><span class="params">(parameter_list)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数列表可以没有 </span></span><br><span class="line"><span class="comment"># return value  None(如果不返回)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现两个数字的相加</span></span><br><span class="line"><span class="comment"># 打印输入的参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    result = x+y</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 死循环 (本电脑运行995次便会报错)</span></span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># sys.setrecursionlimit(10000000)</span></span><br><span class="line"><span class="comment"># 不要用python内置的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_code</span><span class="params">(code)</span>:</span></span><br><span class="line">    print(code)</span><br><span class="line">print(print_code(<span class="string">'hello world'</span>))</span><br></pre></td></tr></table></figure><h3 id="函数返回多个结果"><a href="#函数返回多个结果" class="headerlink" title="函数返回多个结果"></a>函数返回多个结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数返回多个值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">damage</span><span class="params">(skill1, skill2)</span>:</span></span><br><span class="line">    damage1 = skill1 * <span class="number">3</span></span><br><span class="line">    damage2 = skill2 * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> damage1,damage2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型为元组</span></span><br><span class="line">print(type(damage(<span class="number">3</span>,<span class="number">5</span>)))</span><br><span class="line"><span class="comment"># 利用多值进行接收，有意义的参数接收</span></span><br><span class="line"><span class="comment"># 序列解包</span></span><br><span class="line">damage_skill1,damage_skill2 = damage(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">print(damage_skill1,damage_skill2)</span><br></pre></td></tr></table></figure><h3 id="序列解包及链式赋值"><a href="#序列解包及链式赋值" class="headerlink" title="序列解包及链式赋值"></a>序列解包及链式赋值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a = 1</span></span><br><span class="line"><span class="comment"># b = 2</span></span><br><span class="line"><span class="comment"># c = 3</span></span><br><span class="line"><span class="comment"># a,b,c = 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列解包</span></span><br><span class="line">d = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">print(type(d))</span><br><span class="line"></span><br><span class="line">a,b,c = d</span><br><span class="line">print(a,b,c)</span><br><span class="line"></span><br><span class="line">a=b=c=<span class="number">1</span></span><br><span class="line">print(a,b,c)</span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数参数</span></span><br><span class="line"><span class="comment"># 必须参数 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    result = x/y</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字参数</span></span><br><span class="line">c = add(y=<span class="number">2</span>,x=<span class="number">1</span>)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">students</span><span class="params">(name, age=<span class="number">18</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'我是'</span>+name+<span class="string">',今年'</span>+str(age))</span><br><span class="line"></span><br><span class="line">students(<span class="string">'鹏'</span>)</span><br><span class="line">students(<span class="string">'鹏'</span>,<span class="number">99</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变参数</span></span><br><span class="line">print(<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>)</span><br><span class="line"><span class="comment"># (),[]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*param)</span>:</span></span><br><span class="line">    print(param)</span><br><span class="line">    print(type(param))</span><br><span class="line"></span><br><span class="line">demo(<span class="string">'q'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>,<span class="string">'h'</span>)</span><br><span class="line"></span><br><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 二维元组</span></span><br><span class="line">demo(a)</span><br><span class="line"><span class="comment"># 非二维元组</span></span><br><span class="line">demo(*a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数组合的复杂性</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span><span class="params">(param1, param2=<span class="number">2</span>, *param)</span>:</span></span><br><span class="line">    print(param1)</span><br><span class="line">    print(param2)</span><br><span class="line">    print(param)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字 可变参数</span></span><br><span class="line"><span class="comment"># 参数的使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squsum</span><span class="params">(*param)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> param:</span><br><span class="line">        sum+=i*i </span><br><span class="line">    print(sum)</span><br><span class="line"></span><br><span class="line">squsum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#任意关键字参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">city_temp</span><span class="params">(**param)</span>:</span></span><br><span class="line">    print(param)</span><br><span class="line">    print(type(param))</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> param:</span><br><span class="line">        print(key,value)</span><br><span class="line"></span><br><span class="line">city_temp(bj=<span class="string">'30'</span>,sh=<span class="string">'20'</span>,hz=<span class="string">'10'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单认识Python函数~&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://liupeng.world/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liupeng.world/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>杭州景点推荐</title>
    <link href="http://liupeng.world/2019/10/18/%E6%9D%AD%E5%B7%9E%E6%99%AF%E7%82%B9%E6%8E%A8%E8%8D%90/"/>
    <id>http://liupeng.world/2019/10/18/杭州景点推荐/</id>
    <published>2019-10-18T06:53:00.000Z</published>
    <updated>2019-10-18T07:50:11.082Z</updated>
    
    <content type="html"><![CDATA[<p>杭州。。。。还是有东西可以玩的嘛~<br><a id="more"></a></p><h3 id="景致"><a href="#景致" class="headerlink" title="景致"></a>景致</h3><h4 id="拱宸桥"><a href="#拱宸桥" class="headerlink" title="拱宸桥"></a>拱宸桥</h4><blockquote><p>可以从武林门码头坐水上巴士去  3元一个人  周末水上巴士时间营业时间会长点 夜景还可以</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.139&amp;pointy=30.3182&amp;name=%E6%8B%B1%E5%AE%B8%E6%A1%A5&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E6%8B%B1%E5%A2%85%E5%8C%BA%E6%A1%A5%E8%A5%BF%E7%9B%B4%E8%A1%971%E5%8F%B7%E6%AD%A3%E4%B8%9C%E6%96%B9%E5%90%9140%E7%B1%B3&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="胜利河美食街"><a href="#胜利河美食街" class="headerlink" title="胜利河美食街"></a>胜利河美食街</h4><blockquote><p>这个要晚上去 然而门店不如从前了  特意去就没必要 </p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.156&amp;pointy=30.2982&amp;name=%E8%83%9C%E5%88%A9%E6%B2%B3%E7%BE%8E%E9%A3%9F%E8%A1%97&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E6%8B%B1%E5%A2%85%E5%8C%BA%E9%9C%9E%E6%B9%BE%E5%B7%B7&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="河坊街"><a href="#河坊街" class="headerlink" title="河坊街"></a>河坊街</h4><blockquote><p>购买纪念品好去处   哈哈哈  </p><p>里面有几家厉害的珠宝工作室书店茶馆   不在正街 靠你慢慢找</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.175&amp;pointy=30.2396&amp;name=%E6%B2%B3%E5%9D%8A%E8%A1%97&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%B8%8A%E5%9F%8E%E5%8C%BA&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="北山街"><a href="#北山街" class="headerlink" title="北山街"></a>北山街</h4><blockquote><p>各种名人老宅 西湖博物馆在这条街</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.146&amp;pointy=30.2571&amp;name=%E5%8C%97%E5%B1%B1%E8%A1%97&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%A5%BF%E6%B9%96%E5%8C%BA&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="纯真年代书吧"><a href="#纯真年代书吧" class="headerlink" title="纯真年代书吧"></a>纯真年代书吧</h4><blockquote><p>这个书店在半山腰 要爬上去 不建议特意去  去西湖玩有空时准备去转转</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.149&amp;pointy=30.261&amp;name=%E7%BA%AF%E7%9C%9F%E5%B9%B4%E4%BB%A3%E4%B9%A6%E5%90%A7&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%A5%BF%E6%B9%96%E5%8C%BA%E8%BE%B9%E5%8C%97%E5%B1%B1%E8%A1%97%E4%BF%9D%E4%BF%B6%E5%A1%94%E5%89%8D%E5%B1%B1%E8%B7%AF8%E5%8F%B7%2C%E4%BF%9D%E4%BF%B6%E5%A1%94%E6%AD%A3%E4%B8%8B%E4%BE%A7&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="中国美术学院"><a href="#中国美术学院" class="headerlink" title="中国美术学院"></a>中国美术学院</h4><blockquote><p>浙江美术馆   国美  恒庐美术馆在这条街</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.16&amp;pointy=30.243&amp;name=%E4%B8%AD%E5%9B%BD%E7%BE%8E%E6%9C%AF%E5%AD%A6%E9%99%A2&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%B8%8A%E5%9F%8E%E5%8C%BA%E5%8D%97%E5%B1%B1%E8%B7%AF218%E5%8F%B7&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="西溪国家湿地公园"><a href="#西溪国家湿地公园" class="headerlink" title="西溪国家湿地公园"></a>西溪国家湿地公园</h4><blockquote><p>风景区   可以坐摇橹船  有几家不错的酒店在内</p><p>里面河渚街有些小吃    美食街有一两家味道尚可  叫什么小镇 店名一时半会忘了</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.065&amp;pointy=30.269&amp;name=%E8%A5%BF%E6%BA%AA%E5%9B%BD%E5%AE%B6%E6%B9%BF%E5%9C%B0%E5%85%AC%E5%9B%AD&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%A5%BF%E6%B9%96%E5%8C%BA%E7%95%99%E4%B8%8B%E9%95%87%E5%A4%A9%E7%9B%AE%E5%B1%B1%E8%B7%AF518%E5%8F%B7&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="西兴古镇"><a href="#西兴古镇" class="headerlink" title="西兴古镇"></a>西兴古镇</h4><blockquote><p> 尚未开发的城中镇   整体居民为主</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.222&amp;pointy=30.1911&amp;name=%E8%A5%BF%E5%85%B4%E5%8F%A4%E9%95%87&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E6%BB%A8%E6%B1%9F%E5%8C%BA%E5%AE%98%E6%B2%B3%E8%B7%AF105%E9%99%84%E8%BF%91&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="良渚博物院"><a href="#良渚博物院" class="headerlink" title="良渚博物院"></a>良渚博物院</h4><blockquote><p>今年刚申遗成功 ～ </p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.028&amp;pointy=30.3774&amp;name=%E8%89%AF%E6%B8%9A%E5%8D%9A%E7%89%A9%E9%99%A2&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%BD%99%E6%9D%AD%E5%8C%BA%E7%BE%8E%E4%B8%BD%E6%B4%B2%E8%B7%AF1%E5%8F%B7&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="杭州万科良良渚文化艺术中心"><a href="#杭州万科良良渚文化艺术中心" class="headerlink" title="杭州万科良良渚文化艺术中心"></a>杭州万科良良渚文化艺术中心</h4><blockquote><p>大屋顶     微信号：vankeletters</p><p>晓书馆、以及电影、小话剧还有一些活动 上这个公众号预约就是</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.032&amp;pointy=30.3654&amp;name=%E6%9D%AD%E5%B7%9E%E4%B8%87%E7%A7%91%E8%89%AF%E6%B8%9A%E6%96%87%E5%8C%96%E8%89%BA%E6%9C%AF%E4%B8%AD%E5%BF%83&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%BD%99%E6%9D%AD%E5%8C%BA%E6%BB%A8%E6%B2%B3%E5%8D%97%E8%B7%AF%E4%B8%8E%E7%8E%89%E9%B8%9F%E8%B7%AF%E4%BA%A4%E5%8F%89%E5%8F%A3%E9%99%84%E8%BF%91&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="杭州菩提谷"><a href="#杭州菩提谷" class="headerlink" title="杭州菩提谷"></a>杭州菩提谷</h4><blockquote><p>杭州菩提谷     微信号：boutiquehouse</p><p>这家做的还不错   在周边山上  风景好的地方  感受原生态大自然优选这家</p></blockquote><h3 id="文艺"><a href="#文艺" class="headerlink" title="文艺"></a>文艺</h3><h4 id="塘栖古镇"><a href="#塘栖古镇" class="headerlink" title="塘栖古镇"></a>塘栖古镇</h4><blockquote><p>这边有家老粮仓倒值得去看看   不过挺远  可以的话 自己租车去 </p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.184&amp;pointy=30.4765&amp;name=%E5%A1%98%E6%A0%96%E5%8F%A4%E9%95%87&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%BD%99%E6%9D%AD%E5%8C%BA%E5%B9%BF%E6%B5%8E%E8%B7%AF&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="玉皇山"><a href="#玉皇山" class="headerlink" title="玉皇山"></a>玉皇山</h4><blockquote><p>建议开车去   茶博物馆   琴谷在这边</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.155&amp;pointy=30.219&amp;name=%E7%8E%89%E7%9A%87%E5%B1%B1&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%A5%BF%E6%B9%96%E5%8C%BA%E7%8E%89%E7%9A%87%E5%B1%B1%E8%B7%AF&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="梅家坞"><a href="#梅家坞" class="headerlink" title="梅家坞"></a>梅家坞</h4><blockquote><p>龙井一般去这买一块买  不过建议熟人陪着去    现在是老茶了   新茶清明节那阵买  买明前茶 </p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.088&amp;pointy=30.2061&amp;name=%E6%9D%AD%E5%B7%9E%E8%A5%BF%E6%B9%96%E9%A3%8E%E6%99%AF%E5%90%8D%E8%83%9C%E5%8C%BA-%E6%A2%85%E5%AE%B6%E5%9D%9E&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%A5%BF%E6%B9%96%E5%8C%BA%E6%A2%85%E7%81%B5%E5%8D%97%E8%B7%AF%E5%8C%97%E6%AE%B5&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="上天竺，中天竺，三天竺"><a href="#上天竺，中天竺，三天竺" class="headerlink" title="上天竺，中天竺，三天竺"></a>上天竺，中天竺，三天竺</h4><blockquote><p>烧香拜佛吃斋 推荐</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.099&amp;pointy=30.2267&amp;name=%E4%B8%8A%E5%A4%A9%E7%AB%BA&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%A5%BF%E6%B9%96%E5%8C%BA%E5%A4%A9%E7%AB%BA%E8%B7%AF%E4%B8%8E%E6%A2%85%E7%81%B5%E5%8C%97%E8%B7%AF%E4%BA%A4%E6%B1%87%E5%A4%84&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="九溪烟树"><a href="#九溪烟树" class="headerlink" title="九溪烟树"></a>九溪烟树</h4><blockquote><p>适合步行拍照的美美哒的地方 </p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.113&amp;pointy=30.2027&amp;name=%E4%B9%9D%E6%BA%AA%E7%83%9F%E6%A0%91&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%A5%BF%E6%B9%96%E5%8C%BA%E9%BE%99%E4%BA%95%E6%9D%91%E5%8D%97%E4%B9%9D%E6%BA%AA%E5%8D%81%E5%85%AB%E6%B6%A7%E5%B0%BD%E5%A4%B4&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="茅以升先生像"><a href="#茅以升先生像" class="headerlink" title="茅以升先生像"></a>茅以升先生像</h4><blockquote><p>旁边的钱塘江大桥可以走一走。茅以升先生设计的  一百多年了     中日战争时 还被炸断过 </p><p>旁边还有个六合塔</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.136&amp;pointy=30.1983&amp;name=%E8%8C%85%E4%BB%A5%E5%8D%87%E5%85%88%E7%94%9F%E5%83%8F&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%B8%8A%E5%9F%8E%E5%8C%BA%E4%B9%8B%E6%B1%9F%E8%B7%AF&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="城市阳台"><a href="#城市阳台" class="headerlink" title="城市阳台"></a>城市阳台</h4><blockquote><p>这边比较洋气了    周末看灯光秀的地方。。。 跟西湖的喷泉秀不一样  </p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.216&amp;pointy=30.2423&amp;name=%E5%9F%8E%E5%B8%82%E9%98%B3%E5%8F%B0&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E6%B1%9F%E5%B9%B2%E5%8C%BA%E8%A7%A3%E6%94%BE%E4%B8%9C%E8%B7%AF%E4%B8%8E%E4%B9%8B%E6%B1%9F%E8%B7%AF%E4%BA%A4%E5%8F%89%E5%8F%A3&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="滨江樱花大道"><a href="#滨江樱花大道" class="headerlink" title="滨江樱花大道"></a>滨江樱花大道</h4><blockquote><p>樱花三四五月才有   空气好的时候可以从复兴桥段 起跑 至西兴桥段，骑单车也可以，早晨或晚上跑跑，白天有点吵 ，如果很早很早也不错，建议晚上吧，看看夜景，这一条吃宵夜的地方不少。</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.185&amp;pointy=30.2041&amp;name=%E6%BB%A8%E6%B1%9F%E6%A8%B1%E8%8A%B1%E5%A4%A7%E9%81%93&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E6%BB%A8%E6%B1%9F%E5%8C%BA%E9%97%BB%E6%B6%9B%E8%B7%AF&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="金铂湾"><a href="#金铂湾" class="headerlink" title="金铂湾"></a>金铂湾</h4><blockquote><p>一线江景这一片宵夜挺多,</p><p>滨江萧山那边比较现代</p><p>老城区保留了很多遗迹 </p><p>城西景区空气相对好些  植物多些    比如西溪 比如良渚</p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=120.21&amp;pointy=30.2144&amp;name=%E9%87%91%E9%93%82%E6%B9%BE&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E6%BB%A8%E6%B1%9F%E5%8C%BA%E9%97%BB%E6%B6%9B%E8%B7%AF%E4%B8%8E%E9%80%9A%E5%92%8C%E8%B7%AF%E4%BA%A4%E5%8F%89%E5%8F%A3%E4%B8%9C%E5%8C%97%E8%A7%92&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p><h4 id="南湖路"><a href="#南湖路" class="headerlink" title="南湖路"></a>南湖路</h4><blockquote><p>老余杭也可以住个一两天    风景有南湖   遗迹运河南端 老桥   生活气息浓厚。吃的有家黄牛肉锅炒鸡好吃 </p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=119.935&amp;pointy=30.2705&amp;name=%E5%8D%97%E6%B9%96%E8%B7%AF&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%BD%99%E6%9D%AD%E5%8C%BA&amp;ref=WeChat" target="_blank" rel="noopener">地址</a>   <a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=119.941&amp;pointy=30.2636&amp;name=%E4%B8%AD%E5%9B%BD%E5%87%89%E9%83%BD%E9%BB%84%E7%89%9B%E8%82%89%E9%A6%86&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%BD%99%E6%9D%AD%E5%8C%BA%E8%81%94%E5%85%B4%E8%B7%AF153%E5%8F%B7&amp;ref=WeChat" target="_blank" rel="noopener">中国凉都黄牛肉馆</a></p><h4 id="仓前羊锅村"><a href="#仓前羊锅村" class="headerlink" title="仓前羊锅村"></a>仓前羊锅村</h4><blockquote><p>有车的话  周末可以安排羊锅 良渚这边去羊锅村也近 </p></blockquote><p><a href="https://map.qq.com/?type=marker&amp;isopeninfowin=1&amp;markertype=1&amp;pointx=119.97&amp;pointy=30.3114&amp;name=%E4%BB%93%E5%89%8D%E7%BE%8A%E9%94%85%E6%9D%91&amp;addr=%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%BD%99%E6%9D%AD%E5%8C%BA%E8%BF%90%E6%BA%AA%E8%B7%AF&amp;ref=WeChat" target="_blank" rel="noopener">地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;杭州。。。。还是有东西可以玩的嘛~&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://liupeng.world/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://liupeng.world/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Python的分支，循环与条件</title>
    <link href="http://liupeng.world/2019/10/17/Python%E7%9A%84%E5%88%86%E6%94%AF%EF%BC%8C%E5%BE%AA%E7%8E%AF%E4%B8%8E%E6%9D%A1%E4%BB%B6/"/>
    <id>http://liupeng.world/2019/10/17/Python的分支，循环与条件/</id>
    <published>2019-10-17T02:29:00.000Z</published>
    <updated>2019-10-17T02:31:25.895Z</updated>
    
    <content type="html"><![CDATA[<p>了解条件，循环语句~<br><a id="more"></a></p><h3 id="什么是表达式"><a href="#什么是表达式" class="headerlink" title="什么是表达式"></a>什么是表达式</h3><blockquote><p>表达式（Expression）就是运算符（operator）和操作数（operand）所构成的序列</p></blockquote><h3 id="表达式的优先级"><a href="#表达式的优先级" class="headerlink" title="表达式的优先级"></a>表达式的优先级</h3><blockquote><p>请自行百度~  贴图太多网页卡</p></blockquote><h3 id="常用的Python开发软件"><a href="#常用的Python开发软件" class="headerlink" title="常用的Python开发软件"></a>常用的Python开发软件</h3><blockquote><p>vscode    sublime    pycharm</p></blockquote><h3 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">    一段小程序</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">account = <span class="string">'liupeng'</span></span><br><span class="line">password = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'please input account'</span>)</span><br><span class="line">user_account = input()</span><br><span class="line">print(<span class="string">'please input password'</span>)</span><br><span class="line">user_password = input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (user_account == account) <span class="keyword">and</span> (password == user_password):</span><br><span class="line">    print(<span class="string">'验证通过~'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'验证失败~'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">pass</span>            <span class="comment"># pass 占位符</span></span><br><span class="line"><span class="keyword">elif</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">con = <span class="number">0</span></span><br><span class="line"><span class="comment"># 适用于递归</span></span><br><span class="line"><span class="keyword">while</span> con &lt;= <span class="number">10</span> :</span><br><span class="line">    con += <span class="number">1</span></span><br><span class="line">    print(con)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'nb~'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 主要是用来遍历/循环 序列或者集合,字典</span></span><br><span class="line">x = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)]</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> x:</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(b)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'结束~'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># for(i=1; i&lt;10; i++)&#123;&#125;</span></span><br><span class="line"><span class="comment"># range() 起始，结束，步长</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    print(a,end=<span class="string">' | '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">10</span>,<span class="number">0</span>,<span class="number">-2</span>):</span><br><span class="line">    print(a,end=<span class="string">' | '</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解条件，循环语句~&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://liupeng.world/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liupeng.world/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python的变量与运算符</title>
    <link href="http://liupeng.world/2019/10/15/Python%E7%9A%84%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://liupeng.world/2019/10/15/Python的变量与运算符/</id>
    <published>2019-10-15T02:07:00.000Z</published>
    <updated>2019-10-15T02:09:35.584Z</updated>
    
    <content type="html"><![CDATA[<p>了解变量与运算符~<br><a id="more"></a></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h4><p>我认为是对各种数据的一种命名（便于管理，运算，赋予意义）</p><h4 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h4><blockquote><p> 只能字母，数字，下划线</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>A =<span class="number">1</span>//不能以数字开头</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><blockquote><p>系统的关键字 不能用在变量名中 保留关键字</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">and</span> = <span class="number">1</span></span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> =<span class="number">2</span></span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><blockquote><p>不要用函数名做变量(建议)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">1</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; type = 1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">1</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#38&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    type(<span class="number">1</span>)</span><br><span class="line">TypeError: <span class="string">'int'</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</span><br></pre></td></tr></table></figure><h4 id="值类型与引用类型"><a href="#值类型与引用类型" class="headerlink" title="值类型与引用类型"></a>值类型与引用类型</h4><blockquote><p>值类型：int    str    tuple    (不可变)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1752811184</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)//id() 内存地址</span><br><span class="line"><span class="number">1752811184</span></span><br></pre></td></tr></table></figure><blockquote><p>引用类型：list    set    dict    (可变)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="string">'10'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">[<span class="string">'10'</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">3120947373384</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">3120947373704</span></span><br></pre></td></tr></table></figure><h4 id="列表的可变与元组的不可变"><a href="#列表的可变与元组的不可变" class="headerlink" title="列表的可变与元组的不可变"></a>列表的可变与元组的不可变</h4><blockquote><p>列表 ：list    (可变)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">3120947372936</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="string">'3'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">3120947372936</span></span><br></pre></td></tr></table></figure><blockquote><p>元组：tuple（不可变）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">3120947366000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="string">'3'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#105&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'3'</span></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><blockquote><p>有意思的事例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>][<span class="number">1</span>] = <span class="string">'66'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="string">'66'</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h4><blockquote><p>+    -    *    /    //(整除)    %(取余)    **(平方，立方)    </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello '</span>+<span class="string">'world'</span></span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]*<span class="number">3</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span><span class="number">-1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>/<span class="number">2</span></span><br><span class="line"><span class="number">1.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span>//<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span>%<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>**<span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>**<span class="number">5</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><blockquote><p>=    +=    -=    *=    /=    %=    **=    //=</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a -= <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a *= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a /= <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a %= <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">0.5</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><blockquote><p>==    !=    &gt;    &lt;    &gt;=    &lt;=</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> == <span class="number">1</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &gt;= <span class="number">1</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a != b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b+=b&gt;=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> &gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> &gt; <span class="string">'b'</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'b'</span>)</span><br><span class="line"><span class="number">98</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'abc'</span> &gt; <span class="string">'abd'</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt; [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) &lt; (<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><blockquote><p>and(且)    or(或)    not(非)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">not</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>int    float    0被认为是Flase，非0表示True    </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">and</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">or</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="string">'a'</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><blockquote><p>空字符串被认为False，非空表示True</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="string">''</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="string">'gt'</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><blockquote><p>空的列表，元组，字典被认为是Flase，非空表示True</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> []</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><blockquote><p> 结果的返回(有些绕~需要详解的请留言)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>] <span class="keyword">or</span> []</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[] <span class="keyword">or</span> [<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">and</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">and</span> <span class="string">'b'</span></span><br><span class="line"><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">and</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><blockquote><p>in    not in    </p><p>列表，元组，字典（key） 都是一样的使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">'h'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">in</span> <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><blockquote><p>is    not is</p><p>== 和 is    ==比较的是值    is比较的是内存地址</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">1752811184</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">1752811184</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">3120947373448</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">3120947374280</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h4 id="值，身份，类型判断"><a href="#值，身份，类型判断" class="headerlink" title="值，身份，类型判断"></a>值，身份，类型判断</h4><blockquote><p>值：==    判断</p><p>身份：is    判断</p><p>类型：isinstance()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(a,int)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><blockquote><p>&amp;(按位与)    |(按位或)    ^(按位异或)    ~(按位取反)    &lt;&lt;(左移动)    &gt;&gt;(右移动)</p><p>把数字当做二进制进行运算</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="\images\Python Operator.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解变量与运算符~&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://liupeng.world/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liupeng.world/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python的基本数据类型</title>
    <link href="http://liupeng.world/2019/10/14/Python%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://liupeng.world/2019/10/14/Python的基本数据类型/</id>
    <published>2019-10-14T01:48:00.000Z</published>
    <updated>2019-10-14T01:50:44.247Z</updated>
    
    <content type="html"><![CDATA[<p>基本数据类型介绍~<br><a id="more"></a></p><h3 id="Number：数字"><a href="#Number：数字" class="headerlink" title="Number：数字"></a>Number：数字</h3><h4 id="整数（int）"><a href="#整数（int）" class="headerlink" title="整数（int）"></a>整数（int）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">1</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="浮点数（float）"><a href="#浮点数（float）" class="headerlink" title="浮点数（float）"></a>浮点数（float）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.5</span></span><br><span class="line"><span class="number">1.5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="number">1.5</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布尔类型（bool）"><a href="#布尔类型（bool）" class="headerlink" title="布尔类型（bool）"></a>布尔类型（bool）</h4><blockquote><p>非空，非0大部分都为true</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool(<span class="number">-1</span>)  //true</span><br><span class="line">bool(<span class="number">1</span>)  //true</span><br><span class="line">bool(<span class="string">'aa'</span>)  //true</span><br><span class="line">bool(<span class="number">0</span>)  //false</span><br><span class="line">bool(<span class="string">''</span>)  //false</span><br><span class="line">bool(<span class="keyword">None</span>) //false</span><br></pre></td></tr></table></figure><h4 id="复数（complex）"><a href="#复数（complex）" class="headerlink" title="复数（complex）"></a>复数（complex）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">36j</span><br></pre></td></tr></table></figure><h4 id="进制转换问题"><a href="#进制转换问题" class="headerlink" title="进制转换问题"></a>进制转换问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Ob10  //<span class="number">2</span>进制</span><br><span class="line"><span class="number">0o10</span>  //<span class="number">8</span>进制</span><br><span class="line"><span class="number">0x10</span>  //<span class="number">16</span>进制</span><br><span class="line"><span class="number">0x1F</span>  //<span class="number">16</span>进制 <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bin(<span class="number">10</span>)//(任何进制)转<span class="number">2</span>进制</span><br><span class="line"><span class="string">'0b1010'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oct(<span class="number">0b111</span>)//(任何进制)转<span class="number">8</span>进制</span><br><span class="line"><span class="string">'0o7'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">0b111</span>)//(任何进制)转<span class="number">10</span>进制</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">0o77</span>)//(任何进制)转<span class="number">16</span>进制</span><br><span class="line"><span class="string">'0x3f'</span></span><br></pre></td></tr></table></figure><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><h5 id="字符串（str）"><a href="#字符串（str）" class="headerlink" title="字符串（str）"></a>字符串（str）</h5><h6 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h6><blockquote><p>单引号 : 包裹则为字符串</p><p>双引号：内部可以包裹单引号</p><p>三引号：可以换行(79建议换行)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">"let's go"</span></span><br><span class="line"><span class="string">"let's go"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"""</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">liupeng</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">'\nhello world\nliupeng\n'</span></span><br></pre></td></tr></table></figure><h6 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h6><blockquote><p>\n  换行</p><p>\‘    单引号</p><p>\t    横向制表符</p><p>\r   回车</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">'let\'s go'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">'hello \n world'</span>)</span><br><span class="line"><span class="string">'hello </span></span><br><span class="line"><span class="string">world'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;print(<span class="string">r'c:\nhello\nworld'</span>)//原始字符串</span><br><span class="line"><span class="string">'c:\nhello\nworld'</span></span><br></pre></td></tr></table></figure><h6 id="字符串的计算"><a href="#字符串的计算" class="headerlink" title="字符串的计算"></a>字符串的计算</h6><blockquote><p>按步长进行计算，尾部截取需要大一位</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">"hello "</span> + <span class="string">"world"</span></span><br><span class="line"><span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="string">"hello"</span>*<span class="number">3</span></span><br><span class="line"><span class="string">'hellohellohello'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="string">"hello world"</span>[<span class="number">0</span>]</span><br><span class="line"><span class="string">'h'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="string">"hello world"</span>[<span class="number">-1</span>]</span><br><span class="line"><span class="string">'d'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;<span class="string">"hello world"</span>[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"><span class="string">'hello'</span></span><br></pre></td></tr></table></figure><h5 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,True,False,<span class="string">'world'</span>])</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">5</span>,<span class="number">1</span>],True,False,<span class="string">'world'</span>])</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; [1,2,3,4][0]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>][<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]*<span class="number">3</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]+[<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h5 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h5><p>数据操作和list没区别（不过引用不可变）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type((<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(<span class="params">(<span class="number">1</span>)</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(<span class="params">()</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure><h5 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h5><p>序列的都可以用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'a'</span>)</span><br><span class="line"><span class="number">97</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">' '</span>)</span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><h4 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h4><p>无序，不可重复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">set</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; &#123;1,2,1,5,2&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">in</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; - &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; &amp; &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; | &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(set())</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">set</span>'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h4><p>key - value (key不可以重复，引用不可改变)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(&#123;<span class="number">1</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>&#125;)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; &#123;'q':1,'w':2&#125;['q']</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(&#123;&#125;)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="\images\PythonBasicDataType.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本数据类型介绍~&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://liupeng.world/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liupeng.world/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python导学及安装</title>
    <link href="http://liupeng.world/2019/10/14/Python%E5%AF%BC%E5%AD%A6%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    <id>http://liupeng.world/2019/10/14/Python导学及安装/</id>
    <published>2019-10-14T01:45:00.000Z</published>
    <updated>2019-10-14T01:47:29.069Z</updated>
    
    <content type="html"><![CDATA[<p>了解Python~<br><a id="more"></a></p><h3 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h3><p>Python是一个动态的解释型语言。</p><h4 id="Python能做什么？"><a href="#Python能做什么？" class="headerlink" title="Python能做什么？"></a>Python能做什么？</h4><ol><li>爬虫</li><li>大数据与数据分析（spark）</li><li>自动化运维与自动化测试</li><li>Web开发：Flask,Django</li><li>机器学习：Tensor Flow</li><li>胶水语言：混合其他如C++，Java等来编程。能够把用其他语言制作的各种模块联结在一起。</li></ol><p>当你遇到问题时，随手拿起Python,编写一个工具，这才是Python的正确打开方式~</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.python.org/ftp/python/3.7.4/python-3.7.4-amd64.exe" target="_blank" rel="noopener">window安装地址</a></p><blockquote><p>安装的时候，一定要勾选环境变量。。改下安装地址，其它的默认就行</p></blockquote><p>打开IDLE（window应用直接搜索）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解Python~&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://liupeng.world/categories/Python/"/>
    
    
      <category term="Python" scheme="http://liupeng.world/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件</title>
    <link href="http://liupeng.world/2019/10/11/Vue%E7%BB%84%E4%BB%B6/"/>
    <id>http://liupeng.world/2019/10/11/Vue组件/</id>
    <published>2019-10-11T07:35:00.000Z</published>
    <updated>2019-10-11T07:42:20.618Z</updated>
    
    <content type="html"><![CDATA[<p>了解Vue组件<br><a id="more"></a></p><h3 id="is"><a href="#is" class="headerlink" title="is"></a>is</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;组件使用中的细节点&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr is=&quot;row&quot;&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr is=&quot;row&quot;&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr is=&quot;row&quot;&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//html5语法table下面必须有tr,不然我们的模板无法处于table内</span><br><span class="line">Vue.component(&quot;row&quot;,&#123;</span><br><span class="line">template:&apos;&lt;tr&gt;&lt;td&gt;This is a row&lt;/td&gt;&lt;/tr&gt;&apos;</span><br><span class="line">&#125;);</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &quot;#root&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="ref及子组件data"><a href="#ref及子组件data" class="headerlink" title="ref及子组件data"></a>ref及子组件data</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;组件使用中的细节点&lt;/title&gt;</span><br><span class="line">&lt;script src=&apos;./vue.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;counter ref=&quot;one&quot; @change=&quot;handleChange&quot;&gt;&lt;/counter&gt;</span><br><span class="line">&lt;counter ref=&quot;two&quot; @change=&quot;handleChange&quot;&gt;&lt;/counter&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;total&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//子组件data必须是函数，保证多个相同子组件数据互不干涉</span><br><span class="line">Vue.component(&apos;counter&apos;, &#123;</span><br><span class="line">template: &apos;&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;number&#125;&#125;&lt;/div&gt;&apos;,</span><br><span class="line">data: function() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">number: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleClick: function() &#123;</span><br><span class="line">this.number ++</span><br><span class="line">this.$emit(&apos;change&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &apos;#root&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">total: 0</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleChange: function() &#123;</span><br><span class="line">                    //写在html上是获取文档</span><br><span class="line">//在组件上是获取整个实例</span><br><span class="line">this.total = this.$refs.one.number + this.$refs.two.number</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="父子组件的数据传递"><a href="#父子组件的数据传递" class="headerlink" title="父子组件的数据传递"></a>父子组件的数据传递</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;父子组件传值&lt;/title&gt;</span><br><span class="line">&lt;script src=&apos;./vue.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;counter :count=&quot;3&quot; @inc=&quot;handleIncrease&quot;&gt;&lt;/counter&gt;</span><br><span class="line">&lt;counter :count=&quot;2&quot; @inc=&quot;handleIncrease&quot;&gt;&lt;/counter&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;total&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">var counter = &#123;</span><br><span class="line">props: [&apos;count&apos;],</span><br><span class="line">data: function() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">number: this.count</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: &apos;&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;number&#125;&#125;&lt;/div&gt;&apos;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleClick: function() &#123;</span><br><span class="line">this.number = this.number + 2;</span><br><span class="line">this.$emit(&apos;inc&apos;, 2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &apos;#root&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">total: 5</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">counter: counter</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleIncrease: function(step) &#123;</span><br><span class="line">this.total += step</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="组件参数校验与非props特性"><a href="#组件参数校验与非props特性" class="headerlink" title="组件参数校验与非props特性"></a>组件参数校验与非props特性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;组件参数校验与非Props特性&lt;/title&gt;</span><br><span class="line">&lt;script src=&apos;./vue.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;child content=&quot;hell&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&apos;child&apos;, &#123;//父给子组件传递数据,不接收(非props特性)</span><br><span class="line">// props: &#123;//父给子组件传递数据，进行接收(props特性)</span><br><span class="line">// content: &#123;</span><br><span class="line">// type: String,//类型接收限制，多类型用数组</span><br><span class="line">// // required: false,</span><br><span class="line">// // default: &apos;default value&apos;,//参数必须传递</span><br><span class="line">// // validator: function(value) &#123;//函数自定义检验</span><br><span class="line">// // return (value.length &gt; 5)</span><br><span class="line">// // &#125;</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;,</span><br><span class="line">template: &apos;&lt;div&gt;hello&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &apos;#root&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="组件绑定原生事件"><a href="#组件绑定原生事件" class="headerlink" title="组件绑定原生事件"></a>组件绑定原生事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;给组件绑定原生事件&lt;/title&gt;</span><br><span class="line">&lt;script src=&apos;./vue.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;child @click.native=&quot;handleClick&quot;&gt;&lt;/child&gt;&lt;!--.native 绑定原生事件--&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">template: &apos;&lt;div&gt;Child&lt;/div&gt;&apos;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &apos;#root&apos;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleClick: function() &#123;</span><br><span class="line">alert(&apos;click&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="非父子组件间的传值"><a href="#非父子组件间的传值" class="headerlink" title="非父子组件间的传值"></a>非父子组件间的传值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;非父子组件的传值&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">  &lt;child content=&quot;childOne&quot;&gt;&lt;/child&gt;</span><br><span class="line">  &lt;child content=&quot;childTwo&quot;&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  // bus 总线 进行非父子组件的传值</span><br><span class="line"></span><br><span class="line">  Vue.prototype.bus = new Vue()</span><br><span class="line"></span><br><span class="line">  Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">  props: [&apos;content&apos;],</span><br><span class="line">  data: function() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">  myContent: this.content</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &apos;&lt;div @click=&quot;handleClick&quot;&gt;&#123;&#123;myContent&#125;&#125;&lt;/div&gt;&apos;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  handleClick: function() &#123;</span><br><span class="line">  this.bus.$emit(&apos;change&apos;, this.myContent)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: function() &#123;</span><br><span class="line">  var this_ = this;</span><br><span class="line">  this.bus.$on(&apos;change&apos;, function(content) &#123;</span><br><span class="line">  this_.myContent = content</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &quot;#root&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><h4 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;插槽 - 单个插槽&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;child&gt;</span><br><span class="line">      &lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">    &lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    var child = &#123;</span><br><span class="line">      template: &apos;&lt;div&gt;&lt;slot&gt;默认插槽的内容&lt;/slot&gt;&lt;/div&gt;&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      components: &#123;</span><br><span class="line">        child: child</span><br><span class="line">      &#125;,</span><br><span class="line">      el: &quot;#root&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;插槽 - 具名插槽&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;child&gt;</span><br><span class="line">      &lt;h1 slot=&quot;header&quot;&gt;header&lt;/h1&gt;</span><br><span class="line">      &lt;h1 slot=&quot;footer&quot;&gt;footer&lt;/h1&gt;</span><br><span class="line">    &lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    var child = &#123;</span><br><span class="line">      template: `&lt;div&gt;</span><br><span class="line">                  &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">                  &lt;div&gt;</span><br><span class="line">                    &lt;h2&gt;content&lt;/h2&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">                  &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">                &lt;/div&gt;`</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      components: &#123;</span><br><span class="line">        child: child</span><br><span class="line">      &#125;,</span><br><span class="line">      el: &quot;#root&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Vue中的作用域插槽&lt;/title&gt;</span><br><span class="line">&lt;script src=&apos;./vue.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;child&gt;</span><br><span class="line">&lt;template slot-scope=&quot;props&quot;&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;props.item&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">data: function() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">list: [1, 2, 3, 4]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: `&lt;div&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;slot </span><br><span class="line">v-for=&quot;item of list&quot;</span><br><span class="line">:item=item</span><br><span class="line">&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">   &lt;/div&gt;`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &apos;#root&apos;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="动态组件与v-once指令"><a href="#动态组件与v-once指令" class="headerlink" title="动态组件与v-once指令"></a>动态组件与v-once指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;动态组件与v-once指令&lt;/title&gt;</span><br><span class="line">&lt;script src=&apos;./vue.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- &lt;component :is=&quot;type&quot;&gt;&lt;/component&gt; --&gt;</span><br><span class="line">&lt;child-one v-if=&quot;type ===&apos;child-one&apos;&quot;&gt;&lt;/child-one&gt;</span><br><span class="line">&lt;child-two v-if=&quot;type ===&apos;child-two&apos;&quot;&gt;&lt;/child-two&gt;</span><br><span class="line">&lt;button @click=&quot;handleBtnClick&quot;&gt;change&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;child-one&apos;, &#123;</span><br><span class="line">template: &apos;&lt;div v-once&gt;child-one&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;child-two&apos;, &#123;</span><br><span class="line">template: &apos;&lt;div v-once&gt;child-two&lt;/div&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &apos;#root&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">type: &apos;child-one&apos;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleBtnClick: function() &#123;</span><br><span class="line">this.type = (this.type === &apos;child-one&apos; ? &apos;child-two&apos;: &apos;child-one&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解Vue组件&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://liupeng.world/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://liupeng.world/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础</title>
    <link href="http://liupeng.world/2019/09/30/Vue%E5%9F%BA%E7%A1%80/"/>
    <id>http://liupeng.world/2019/09/30/Vue基础/</id>
    <published>2019-09-30T07:30:00.000Z</published>
    <updated>2019-09-30T07:32:36.519Z</updated>
    
    <content type="html"><![CDATA[<p>基础使用~<br><a id="more"></a></p><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>生命周期函数就是vue实例在某个时间点会自动执行的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Vue实例生命周期函数&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 生命周期函数就是vue实例在某一个时间点会自动执行的函数</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &quot;#app&quot;,</span><br><span class="line">template: &quot;&lt;div&gt;&#123;&#123;test&#125;&#125;&lt;/div&gt;&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">test: &quot;hello world&quot;</span><br><span class="line">&#125;,</span><br><span class="line">beforeCreate: function() &#123;</span><br><span class="line">console.log(&quot;beforeCreate&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">created: function() &#123;</span><br><span class="line">console.log(&quot;created&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeMount: function() &#123;</span><br><span class="line">console.log(this.$el);</span><br><span class="line">console.log(&quot;beforeMount&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">mounted: function() &#123;</span><br><span class="line">console.log(this.$el);</span><br><span class="line">console.log(&quot;mounted&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy: function() &#123;</span><br><span class="line">console.log(&quot;beforeDestroy&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed: function() &#123;</span><br><span class="line">console.log(&quot;destroyed&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeUpdate: function() &#123;</span><br><span class="line">console.log(&quot;beforeUpdate&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">updated: function() &#123;</span><br><span class="line">console.log(&quot;updated&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>后续会继续增加~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;模版语法&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123;name + &apos; Lee&apos;&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div v-text=&quot;name + &apos; Lee&apos;&quot;&gt;&lt;/div&gt;&lt;!--不做html解析--&gt;</span><br><span class="line">&lt;div v-html=&quot;name + &apos; Lee&apos;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &quot;#app&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">name: &quot;Dell&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性，方法和侦听器"><a href="#计算属性，方法和侦听器" class="headerlink" title="计算属性，方法和侦听器"></a>计算属性，方法和侦听器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;计算属性，方法，侦听器&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&#123;&#123;fullName&#125;&#125;</span><br><span class="line">&#123;&#123;age&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &quot;#app&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">firstName: &quot;Dell&quot;,</span><br><span class="line">lastName: &quot;Lee&quot;,</span><br><span class="line">fullName: &quot;Dell Lee&quot;,</span><br><span class="line">age: 28</span><br><span class="line">&#125;,</span><br><span class="line">            //侦听器</span><br><span class="line">watch: &#123;</span><br><span class="line">firstName: function() &#123;</span><br><span class="line">console.log(&quot;计算了一次&quot;);</span><br><span class="line">this.fullName = this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">&#125;,</span><br><span class="line">lastName: function() &#123;</span><br><span class="line">console.log(&quot;计算了一次&quot;);</span><br><span class="line">this.fullName = this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 方法</span><br><span class="line">// methods: &#123;</span><br><span class="line">// fullName: function() &#123;</span><br><span class="line">// console.log(&quot;计算了一次&quot;);</span><br><span class="line">// return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line">// 计算属性</span><br><span class="line">// computed: &#123;</span><br><span class="line">// fullName: function() &#123;</span><br><span class="line">// console.log(&quot;计算了一次&quot;);</span><br><span class="line">// return this.firstName + &quot; &quot; + this.lastName</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的setter和getter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;计算属性的setter和getter&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&#123;&#123;fullName&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &quot;#app&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">firstName: &quot;Dell&quot;,</span><br><span class="line">lastName: &quot;Lee&quot;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">fullName: &#123;</span><br><span class="line">get: function() &#123;</span><br><span class="line">return this.firstName + &quot; &quot; + this.lastName</span><br><span class="line">&#125;,</span><br><span class="line">set: function(value) &#123;</span><br><span class="line">var arr = value.split(&quot; &quot;);</span><br><span class="line">this.firstName = arr[0];</span><br><span class="line">this.lastName = arr[1];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h3><p>两种：对象语法，数组语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Vue中的样式绑定&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;div :style=&quot;[styleObj, &#123;fontSize: &apos;20px&apos;&#125;]&quot; @click=&quot;handleDivClick&quot;&gt;</span><br><span class="line">Hello world</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &quot;#app&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">styleObj: &#123;</span><br><span class="line">color: &quot;black&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleDivClick: function() &#123;</span><br><span class="line">this.styleObj.color = this.styleObj.color === &quot;black&quot; ? &quot;red&quot; : &quot;black&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Vue中的条件渲染&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;show&quot;&gt;</span><br><span class="line">用户名：&lt;input key=&quot;username&quot; /&gt; &lt;!--key防止vue复用--&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;</span><br><span class="line">邮箱名：&lt;input key=&quot;password&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &quot;#app&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">show: false,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Vue中的列表渲染&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;template v-for=&quot;(item,index) of list&quot;&gt;</span><br><span class="line">&lt;div &gt;</span><br><span class="line">&#123;&#123;item.text&#125;&#125; ---- &#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;span&gt;</span><br><span class="line">&#123;&#123;item.text&#125;&#125;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //push pop shift unshift splice sort reverse  动态改变数据直接页面生效</span><br><span class="line">    //或者改变list引用</span><br><span class="line">    //Vue.set()或vm.$set()</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,</span><br><span class="line">data:&#123;</span><br><span class="line">list:[</span><br><span class="line">&#123;</span><br><span class="line">id:&quot;1&quot;,</span><br><span class="line">text:&quot;hello&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">id:&quot;2&quot;,</span><br><span class="line">text:&quot;world&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">id:&quot;3&quot;,</span><br><span class="line">text:&quot;emmmmm&quot;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Vue中的列表渲染&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-for=&quot;(item, key, index) of userInfo&quot;&gt;</span><br><span class="line">&#123;&#123;item&#125;&#125; --- &#123;&#123;key&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        //Vue动态改变，Vue.set(vm.userInfo,&quot;&quot;,&quot;&quot;)</span><br><span class="line">        //vm.$set(vm.userInfo,&quot;&quot;,&quot;&quot;)</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: &quot;#app&quot;,</span><br><span class="line">data: &#123;</span><br><span class="line">userInfo: &#123;</span><br><span class="line">name: &quot;Dell&quot;,</span><br><span class="line">age: 28,</span><br><span class="line">gender: &quot;male&quot;,</span><br><span class="line">salary: &quot;secret&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基础使用~&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://liupeng.world/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://liupeng.world/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门</title>
    <link href="http://liupeng.world/2019/09/29/Vue%E5%85%A5%E9%97%A8/"/>
    <id>http://liupeng.world/2019/09/29/Vue入门/</id>
    <published>2019-09-29T08:37:00.000Z</published>
    <updated>2019-09-29T08:44:16.196Z</updated>
    
    <content type="html"><![CDATA[<p>简介及使用方式~<br><a id="more"></a><br><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">中文社区</a></p><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>刚开始学习vue建议直接下载js包进行引入学习  <a href="https://cn.vuejs.org/js/vue.js" target="_blank" rel="noopener">开发版下载</a>  vue.放在当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Hello World&lt;/title&gt;</span><br><span class="line">&lt;script src=&apos;./vue.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123;content&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//以前js的写法</span><br><span class="line">//var dom = document.getElementById(&apos;app&apos;);</span><br><span class="line">//dom.innerHTML= &apos;Hello World&apos;;</span><br><span class="line">/*setTimeout(function() &#123;</span><br><span class="line">var dom = document.getElementById(&apos;app&apos;);</span><br><span class="line">dom.innerHTML= &apos;bye world&apos;;</span><br><span class="line">&#125;)*/</span><br><span class="line"></span><br><span class="line">//vue的写法</span><br><span class="line">//创建一个实例</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,//实例所管理的区域（id为app的区域）</span><br><span class="line">data: &#123;</span><br><span class="line">content: &apos;Hello World&apos;//区域中所管理的数据</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">app.$data.content = &apos;bye world&apos;</span><br><span class="line">&#125;, 2000);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="ToDoList"><a href="#ToDoList" class="headerlink" title="ToDoList"></a>ToDoList</h3><h4 id="简单练习"><a href="#简单练习" class="headerlink" title="简单练习"></a>简单练习</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;TodoList&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot;  v-model=&quot;inputValue&quot;/&gt;//模型双向绑定</span><br><span class="line">&lt;button v-on:click=&quot;handleBtnClick&quot;&gt;提交&lt;/button&gt;   //事件的触发</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for= &quot;item in list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;//循环</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">data: &#123;</span><br><span class="line">list: [],</span><br><span class="line">inputValue: &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleBtnClick: function () &#123;</span><br><span class="line">this.list.push(this.inputValue);</span><br><span class="line">this.inputValue =&apos;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><h5 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;TodoList&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot;  v-model=&quot;inputValue&quot;/&gt;</span><br><span class="line">&lt;button v-on:click=&quot;handleBtnClick&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;!--v-bind 向组件传递数 父-&gt;子组件 --&gt;</span><br><span class="line">&lt;todo-item v-bind:content=&quot;item&quot; v-for= &quot;item in list&quot;&gt;&lt;/todo-item&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//全局组件</span><br><span class="line">/*Vue.component(&quot;TodoItem&quot;,&#123;</span><br><span class="line">props:[&apos;content&apos;],//接收父组件的传值</span><br><span class="line">template: &quot;&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&quot;//模板</span><br><span class="line">&#125;)*/</span><br><span class="line"></span><br><span class="line">//局部组件</span><br><span class="line">var TodoItem = &#123;</span><br><span class="line">props:[&apos;content&apos;],//接收父组件的传值</span><br><span class="line">template: &quot;&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&quot;//模板</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">components: &#123;//局部组件注册</span><br><span class="line">TodoItem: TodoItem</span><br><span class="line">&#125;,</span><br><span class="line">data: &#123;</span><br><span class="line">list: [],</span><br><span class="line">inputValue: &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleBtnClick: function () &#123;</span><br><span class="line">this.list.push(this.inputValue);</span><br><span class="line">this.inputValue =&apos;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;TodoList&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot;  v-model=&quot;inputValue&quot;/&gt;</span><br><span class="line">&lt;button v-on:click=&quot;handleBtnClick&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;!--v-bind 向组件传递数 父-&gt;子组件 --&gt;</span><br><span class="line">&lt;todo-item  v-bind:content=&quot;item&quot;</span><br><span class="line">v-bind:index=&quot;index&quot; </span><br><span class="line">v-for= &quot;(item,index) in list&quot; </span><br><span class="line">@delete=&quot;handleItemDelete&quot;&gt;&lt;!--接收子组件的触发事件--&gt;</span><br><span class="line">&lt;/todo-item&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//全局组件</span><br><span class="line">/*Vue.component(&quot;TodoItem&quot;,&#123;</span><br><span class="line">props:[&apos;content&apos;],//接收父组件的传值</span><br><span class="line">template: &quot;&lt;li&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&quot;//模板</span><br><span class="line">&#125;)*/</span><br><span class="line"></span><br><span class="line">//局部组件</span><br><span class="line">var TodoItem = &#123;</span><br><span class="line">props:[&apos;content&apos;,&apos;index&apos;],//接收父组件的传值</span><br><span class="line">template: &quot;&lt;li @click=&apos;handleBtnClickItemClick&apos;&gt;&#123;&#123;content&#125;&#125;&lt;/li&gt;&quot;,//模板</span><br><span class="line">methods:&#123;</span><br><span class="line">handleBtnClickItemClick: function()&#123;</span><br><span class="line">this.$emit(&quot;delete&quot;,this.index);//子组件通过事件触发传给父组件</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">el: &apos;#app&apos;,</span><br><span class="line">components: &#123;//局部组件注册</span><br><span class="line">TodoItem: TodoItem</span><br><span class="line">&#125;,</span><br><span class="line">data: &#123;</span><br><span class="line">list: [],</span><br><span class="line">inputValue: &apos;&apos;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">handleBtnClick: function () &#123;</span><br><span class="line">this.list.push(this.inputValue);</span><br><span class="line">this.inputValue =&apos;&apos;;</span><br><span class="line">&#125;,</span><br><span class="line">handleItemDelete: function(index)&#123;</span><br><span class="line">this.list.splice(index,1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;  </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介及使用方式~&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://liupeng.world/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://liupeng.world/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch入门</title>
    <link href="http://liupeng.world/2019/09/20/ElasticSearch%E5%85%A5%E9%97%A8/"/>
    <id>http://liupeng.world/2019/09/20/ElasticSearch入门/</id>
    <published>2019-09-20T08:20:00.000Z</published>
    <updated>2019-09-29T08:47:08.333Z</updated>
    
    <content type="html"><![CDATA[<p>简介及使用方式~<br><a id="more"></a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.1/getting-started.html" target="_blank" rel="noopener">官方文档</a>     <a href="https://www.elasticsearch.cn/" target="_blank" rel="noopener">中文社区</a></p><h3 id="什么是ElasticSearch"><a href="#什么是ElasticSearch" class="headerlink" title="什么是ElasticSearch"></a>什么是ElasticSearch</h3><ul><li>基于Apache Lucene构建的开源搜索引擎</li><li>采用Java编写，提供简单易用的RESTFul API</li><li>轻松的横向扩展，支持PB级别的结构化或非结构化数据</li></ul><h3 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a>常见术语</h3><h4 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档 Document"></a>文档 Document</h4><blockquote><p>用户存储在es中的数据</p></blockquote><p><strong>Json Object,由字段（Field）组成，常见数据类型如下</strong></p><ul><li>字符串：text,keyword</li><li>数值类型：long,integer,short,byte,double,float,half_float,scaled_float</li><li>布尔：boolean</li><li>日期：date</li><li>二进制：binary</li><li>范围类型：integer_range,float_range,long_range,double_range,date_range</li></ul><p><strong>每个文档有唯一的id标识</strong></p><ul><li>自行生成</li><li>es自动生成</li></ul><p><strong>Document MetaData 元数据，用于标注文档的相关信息</strong></p><ul><li>_index：文档所在的索引名</li><li>_type：文档所在的类型名</li><li>_id：文档唯一id</li><li>_uid：组合id，由 _type和 _id组成（6.x _type不再起作用，同 _id一样）</li><li>_source：文档的原始Json数据，可以从这里获取每个字段的内容</li><li>_all：整合所有字段内容到该字段，默认禁用</li></ul><h4 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引 Index"></a>索引 Index</h4><blockquote><p>由具有相同字段的文档列表组成</p></blockquote><p><strong>索引中存储具有相同结构的文档</strong></p><ul><li>每个索引都有自己的mapping定义，用于定义字段名和类型</li></ul><p><strong>一个集群可以有多个索引</strong></p><h4 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点 Node"></a>节点 Node</h4><blockquote><p>一个Elasticsearch的运行实例</p></blockquote><h4 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群 Cluster"></a>集群 Cluster</h4><blockquote><p>由一个或多个节点组成，对外服务</p></blockquote><h3 id="Rest-API"><a href="#Rest-API" class="headerlink" title="Rest API"></a>Rest API</h3><ul><li>REST - REpresentational State Transfer</li><li>URI指定资源，如Index，Document等</li><li>Http Method 指明资源操作类型，如GET，POST，PUT，DELETE等</li><li>API基本格式 http://<ip>:<port>/&lt;索引&gt;/&lt;类型&gt;/&lt;文档id&gt;</port></ip></li><li>常用HTTP动词GET/PUT/POST/DELETE</li></ul><h4 id="常见的交互方式"><a href="#常见的交互方式" class="headerlink" title="常见的交互方式"></a>常见的交互方式</h4><ul><li>Curl命令行</li><li>Kibana DevTools</li></ul><h4 id="索引-API"><a href="#索引-API" class="headerlink" title="索引 API"></a>索引 API</h4><blockquote><p>es有专门的Index API，用于创建，更新，删除索引配置等</p></blockquote><h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//request</span><br><span class="line">PUT /test_index</span><br><span class="line"></span><br><span class="line">//response</span><br><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot;: true,</span><br><span class="line">  &quot;shards_acknowledged&quot;: true,</span><br><span class="line">  &quot;index&quot;: &quot;test_index&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查看现有索引"><a href="#查看现有索引" class="headerlink" title="查看现有索引"></a>查看现有索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//request</span><br><span class="line">GET _cat/indices</span><br><span class="line"></span><br><span class="line">//response</span><br><span class="line">green open test_index        qnsE8tAgTFW6oJlYfRKh9A 5 1 0 0 2.2kb 1.1kb</span><br></pre></td></tr></table></figure><h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//request</span><br><span class="line">DELETE /test_index</span><br><span class="line"></span><br><span class="line">//response</span><br><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文档-API"><a href="#文档-API" class="headerlink" title="文档 API"></a>文档 API</h4><h5 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h5><p>如果索引不存在则会自动创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//request</span><br><span class="line">PUT /test_index/doc/1                      //PUT/index/type/id</span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;:&quot;liupeng&quot;,</span><br><span class="line">  &quot;age&quot;:1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//response</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 2,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_seq_no&quot;: 0,</span><br><span class="line">  &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//request</span><br><span class="line">GET /test_index/doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;_id&quot;: &quot;1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//response</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 33,//查询耗时</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 5,</span><br><span class="line">    &quot;successful&quot;: 5,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,//符合条件总数</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [//返回的文档详情数据数组，默认前10个文档</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,//索引名</span><br><span class="line">        &quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,//文档id</span><br><span class="line">        &quot;_score&quot;: 1,//文档得分</span><br><span class="line">        &quot;_source&quot;: &#123;//文档详情</span><br><span class="line">          &quot;username&quot;: &quot;liupeng&quot;,</span><br><span class="line">          &quot;age&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="批量创建文档"><a href="#批量创建文档" class="headerlink" title="批量创建文档"></a>批量创建文档</h5><blockquote><p> es一次创建多个文档，从而减少网络传输开销，提升写入速率</p></blockquote><blockquote><p>endpoint 为_bulk</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//request</span><br><span class="line">POST _bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;test_index&quot;,&quot;_type&quot;:&quot;doc&quot;,&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;username&quot;:&quot;alfred&quot;,&quot;age&quot;:&quot;10&quot;&#125;</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;test_index&quot;,&quot;_type&quot;:&quot;doc&quot;,&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:&quot;2&quot;,&quot;_index&quot;:&quot;test_index&quot;,&quot;_type&quot;:&quot;doc&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;age&quot;:&quot;20&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">//response</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 441,</span><br><span class="line">  &quot;errors&quot;: true,//结果</span><br><span class="line">  &quot;items&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot;: &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;3&quot;,</span><br><span class="line">        &quot;_version&quot;: 1,</span><br><span class="line">        &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">        &quot;_shards&quot;: &#123;</span><br><span class="line">          &quot;total&quot;: 2,</span><br><span class="line">          &quot;successful&quot;: 2,</span><br><span class="line">          &quot;failed&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_seq_no&quot;: 0,</span><br><span class="line">        &quot;_primary_term&quot;: 1,</span><br><span class="line">        &quot;status&quot;: 201</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;delete&quot;: &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_version&quot;: 1,</span><br><span class="line">        &quot;result&quot;: &quot;not_found&quot;,</span><br><span class="line">        &quot;_shards&quot;: &#123;</span><br><span class="line">          &quot;total&quot;: 2,</span><br><span class="line">          &quot;successful&quot;: 1,</span><br><span class="line">          &quot;failed&quot;: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;_seq_no&quot;: 0,</span><br><span class="line">        &quot;_primary_term&quot;: 1,</span><br><span class="line">        &quot;status&quot;: 404</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;update&quot;: &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">        &quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;2&quot;,</span><br><span class="line">        &quot;status&quot;: 404,</span><br><span class="line">        &quot;error&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;document_missing_exception&quot;,</span><br><span class="line">          &quot;reason&quot;: &quot;[doc][2]: document missing&quot;,</span><br><span class="line">          &quot;index_uuid&quot;: &quot;yfEfCn2cSrKb0qCX8Ide4g&quot;,</span><br><span class="line">          &quot;shard&quot;: &quot;2&quot;,</span><br><span class="line">          &quot;index&quot;: &quot;test_index&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="批量查询文档"><a href="#批量查询文档" class="headerlink" title="批量查询文档"></a>批量查询文档</h5><blockquote><p>es允许一次查询多个文档</p><p>endpoint为 _maget</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//request</span><br><span class="line">GET /_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;:[</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;_index&quot;:&quot;test_index&quot;,</span><br><span class="line">    &quot;_type&quot;:&quot;doc&quot;,</span><br><span class="line">    &quot;_id&quot;:&quot;1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_index&quot;:&quot;test_index&quot;,</span><br><span class="line">    &quot;_type&quot;:&quot;doc&quot;,</span><br><span class="line">    &quot;_id&quot;:&quot;2&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//response</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">      &quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;_version&quot;: 1,</span><br><span class="line">      &quot;found&quot;: true,</span><br><span class="line">      &quot;_source&quot;: &#123;</span><br><span class="line">        &quot;username&quot;: &quot;liupeng&quot;,</span><br><span class="line">        &quot;age&quot;: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;test_index&quot;,</span><br><span class="line">      &quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;2&quot;,</span><br><span class="line">      &quot;found&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简介及使用方式~&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://liupeng.world/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="ElasticSearch" scheme="http://liupeng.world/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Webpack安装及使用</title>
    <link href="http://liupeng.world/2019/09/19/webpack%E5%85%A5%E9%97%A8/"/>
    <id>http://liupeng.world/2019/09/19/webpack入门/</id>
    <published>2019-09-19T09:11:00.000Z</published>
    <updated>2019-09-20T08:27:08.448Z</updated>
    
    <content type="html"><![CDATA[<p>简单了解~环境搭建，安装及配置<br><a id="more"></a><br><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">中文文档</a>  <a href="https://webpack.js.org/concepts/" target="_blank" rel="noopener">英文文档</a></p><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>主要用于模块打包工具（ES Module，CommonJS，CMD，ADM）</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><blockquote><p>webpack</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>前提</span><br><span class="line"><span class="meta">$</span> mkdir webpack-demo</span><br><span class="line"><span class="meta">$</span> cd webpack-demo</span><br><span class="line"><span class="meta">$</span> npm init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>全局安装</span><br><span class="line"><span class="meta">$</span> npm install webpack webpack-cli -g</span><br><span class="line"><span class="meta">$</span> npm uninstall webpack webpack-cli -g</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>项目中安装</span><br><span class="line">~/Desktop/webpack-demo</span><br><span class="line"><span class="meta">$</span> npm install webpack webpack-cli -D</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>项目中不同版本安装</span><br><span class="line">~/Desktop/webpack-demo2</span><br><span class="line"><span class="meta">$</span> npm info webpack</span><br><span class="line"><span class="meta">$</span> npm install webpack@3.10.0 webpack-cli -D</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>检查项目安装webpack是否成功</span><br><span class="line">~/Desktop/webpack-demo2</span><br><span class="line"><span class="meta">$</span> npx webpack -v</span><br></pre></td></tr></table></figure><p>package.json文件修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">  <span class="attr">"bundle"</span>: <span class="string">"webpack"</span>//npm run bundle</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"liupeng"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>webpack.config.js          //文件名默认就行，最好不要改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports =&#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,<span class="comment">//模式配置（pro,dev）正式环境压缩</span></span><br><span class="line">entry: &#123;<span class="comment">//打包入口</span></span><br><span class="line">     main: <span class="string">'./src/index.js'</span>   </span><br><span class="line">    &#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'bundle.js'</span>,    <span class="comment">//打包输出名</span></span><br><span class="line">path: path.resolve(__dirname, <span class="string">'dist'</span>)<span class="comment">//打包输出地址</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行打包"><a href="#运行打包" class="headerlink" title="运行打包"></a>运行打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>指定配置文件打包(webpackcongfig.js)</span><br><span class="line">npx webpack --config webpackcongfig.js</span><br><span class="line"><span class="meta">#</span>全局安装打包</span><br><span class="line">webpack index.js</span><br><span class="line"><span class="meta">#</span>项目安装打包</span><br><span class="line">npx webpack index.js</span><br><span class="line"><span class="meta">#</span>配置文件json:scripts打包</span><br><span class="line">npm run bundle</span><br></pre></td></tr></table></figure><h4 id="打包的一些日志输出知识"><a href="#打包的一些日志输出知识" class="headerlink" title="打包的一些日志输出知识"></a>打包的一些日志输出知识</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hash: 打包的唯一标识</span><br><span class="line">Version: webpack版本号</span><br><span class="line">Time: 打包时间</span><br><span class="line">Asset: 打包的文件名</span><br><span class="line">Size: 包的大小</span><br><span class="line">Chunk: 项目中所有打包的文件id</span><br><span class="line">Chunk: 打包生成的文件入口名</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单了解~环境搭建，安装及配置&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://liupeng.world/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="http://liupeng.world/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>BIO,NIO,AIO写法记录</title>
    <link href="http://liupeng.world/2019/02/24/BIO-NIO-AIO%E5%86%99%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <id>http://liupeng.world/2019/02/24/BIO-NIO-AIO写法记录/</id>
    <published>2019-02-24T10:21:00.000Z</published>
    <updated>2019-02-24T11:55:57.559Z</updated>
    
    <content type="html"><![CDATA[<p>写法详解~<br><a id="more"></a></p><h3 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class BIOPlainEchoServer &#123;</span><br><span class="line">    public void serve(int port) throws IOException &#123;</span><br><span class="line">        //将ServerSocket绑定到指定的端口里</span><br><span class="line">        final ServerSocket socket = new ServerSocket(port);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            //阻塞直到收到新的客户端连接</span><br><span class="line">            final Socket clientSocket = socket.accept();</span><br><span class="line">            System.out.println(&quot;Accepted connection from &quot; + clientSocket);</span><br><span class="line">            //创建一个子线程去处理客户端的请求</span><br><span class="line">            new Thread(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()))) &#123;</span><br><span class="line">                        PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true);</span><br><span class="line">                        //从客户端读取数据并原封不动回写回去</span><br><span class="line">                        while (true) &#123;</span><br><span class="line">                            writer.println(reader.readLine());</span><br><span class="line">                            writer.flush();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void improvedServe(int port) throws IOException &#123;</span><br><span class="line">        //将ServerSocket绑定到指定的端口里</span><br><span class="line">        final ServerSocket socket = new ServerSocket(port);</span><br><span class="line">        //创建一个线程池</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(6);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            //阻塞直到收到新的客户端连接</span><br><span class="line">            final Socket clientSocket = socket.accept();</span><br><span class="line">            System.out.println(&quot;Accepted connection from &quot; + clientSocket);</span><br><span class="line">            //将请求提交给线程池去执行</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                try (BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()))) &#123;</span><br><span class="line">                    PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(),true);</span><br><span class="line">                    //从客户端读取数据并原封不动回写回去</span><br><span class="line">                    while (true) &#123;</span><br><span class="line">                        writer.println(reader.readLine());</span><br><span class="line">                        writer.flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public class NIOPlainEchoServer &#123;</span><br><span class="line">    public void serve(int port) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;Listening for connections on port &quot; + port);</span><br><span class="line">        ServerSocketChannel serverChannel = ServerSocketChannel.open();</span><br><span class="line">        ServerSocket ss = serverChannel.socket();</span><br><span class="line">        InetSocketAddress address = new InetSocketAddress(port);</span><br><span class="line">        //将ServerSocket绑定到指定的端口里</span><br><span class="line">        ss.bind(address);</span><br><span class="line">        serverChannel.configureBlocking(false);</span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        //将channel注册到Selector里，并说明让Selector关注的点，这里是关注建立连接这个事件</span><br><span class="line">        serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //阻塞等待就绪的Channel，即没有与客户端建立连接前就一直轮询</span><br><span class="line">                selector.select();</span><br><span class="line">            &#125; catch (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                //代码省略的部分是结合业务，正确处理异常的逻辑</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            //获取到Selector里所有就绪的SelectedKey实例,每将一个channel注册到一个selector就会产生一个SelectedKey</span><br><span class="line">            Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();</span><br><span class="line">            while (iterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey key = (SelectionKey) iterator.next();</span><br><span class="line">                //将就绪的SelectedKey从Selector中移除，因为马上就要去处理它，防止重复执行</span><br><span class="line">                iterator.remove();</span><br><span class="line">                try &#123;</span><br><span class="line">                    //若SelectedKey处于Acceptable状态</span><br><span class="line">                    if (key.isAcceptable()) &#123;</span><br><span class="line">                        ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class="line">                        //接受客户端的连接</span><br><span class="line">                        SocketChannel client = server.accept();</span><br><span class="line">                        System.out.println(&quot;Accepted connection from &quot; + client);</span><br><span class="line">                        client.configureBlocking(false);</span><br><span class="line">                        //像selector注册socketchannel，主要关注读写，并传入一个ByteBuffer实例供读写缓存</span><br><span class="line">                        client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(100));</span><br><span class="line">                    &#125;</span><br><span class="line">                    //若SelectedKey处于可读状态</span><br><span class="line">                    if (key.isReadable()) &#123;</span><br><span class="line">                        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">                        ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class="line">                        //从channel里读取数据存入到ByteBuffer里面</span><br><span class="line">                        client.read(output);</span><br><span class="line">                    &#125;</span><br><span class="line">                    //若SelectedKey处于可写状态</span><br><span class="line">                    if (key.isWritable()) &#123;</span><br><span class="line">                        SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">                        ByteBuffer output = (ByteBuffer) key.attachment();</span><br><span class="line">                        output.flip();</span><br><span class="line">                        //将ByteBuffer里的数据写入到channel里</span><br><span class="line">                        client.write(output);</span><br><span class="line">                        output.compact();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (IOException ex) &#123;</span><br><span class="line">                    key.cancel();</span><br><span class="line">                    try &#123;</span><br><span class="line">                        key.channel().close();</span><br><span class="line">                    &#125; catch (IOException cex) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">public class AIOPlainEchoServer &#123;</span><br><span class="line">    public void serve(int port) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;Listening for connections on port &quot; + port);</span><br><span class="line">        final AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress address = new InetSocketAddress(port);</span><br><span class="line">        // 将ServerSocket绑定到指定的端口里</span><br><span class="line">        serverChannel.bind(address);</span><br><span class="line">        final CountDownLatch latch = new CountDownLatch(1);</span><br><span class="line">        // 开始接收新的客户端请求. 一旦一个客户端请求被接收， CompletionHandler 就会被调用.</span><br><span class="line">        serverChannel.accept(null, new CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void completed(final AsynchronousSocketChannel channel, Object attachment) &#123;</span><br><span class="line">                // 一旦完成处理，再次接收新的客户端请求</span><br><span class="line">                serverChannel.accept(null, this);</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(100);</span><br><span class="line">                // 在channel里植入一个读操作EchoCompletionHandler，一旦buffer有数据写入，EchoCompletionHandler 便会被唤醒</span><br><span class="line">                channel.read(buffer, buffer, new EchoCompletionHandler(channel));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void failed(Throwable throwable, Object attachment) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    // 若遇到异常，关闭channel</span><br><span class="line">                    serverChannel.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    // ingnore on close</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    latch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        try &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private final class EchoCompletionHandler implements CompletionHandler&lt;Integer, ByteBuffer&gt; &#123;</span><br><span class="line">        private final AsynchronousSocketChannel channel;</span><br><span class="line"></span><br><span class="line">        EchoCompletionHandler(AsynchronousSocketChannel channel) &#123;</span><br><span class="line">            this.channel = channel;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void completed(Integer result, ByteBuffer buffer) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            // 在channel里植入一个读操作CompletionHandler，一旦channel有数据写入，CompletionHandler 便会被唤醒</span><br><span class="line">            channel.write(buffer, buffer, new CompletionHandler&lt;Integer, ByteBuffer&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void completed(Integer result, ByteBuffer buffer) &#123;</span><br><span class="line">                    if (buffer.hasRemaining()) &#123;</span><br><span class="line">                        // 如果buffer里还有内容，则再次触发写入操作将buffer里的内容写入channel</span><br><span class="line">                        channel.write(buffer, buffer, this);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        buffer.compact();</span><br><span class="line">                        // 如果channel里还有内容需要读入到buffer里，则再次触发写入操作将channel里的内容读入buffer</span><br><span class="line">                        channel.read(buffer, buffer, EchoCompletionHandler.this);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void failed(Throwable exc, ByteBuffer attachment) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        channel.close();</span><br><span class="line">                    &#125; catch (IOException e) &#123;</span><br><span class="line">                        // ingnore on close</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void failed(Throwable exc, ByteBuffer attachment) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                // ingnore on close</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写法详解~&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://liupeng.world/categories/Java/"/>
    
    
      <category term="IO" scheme="http://liupeng.world/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://liupeng.world/2019/02/17/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://liupeng.world/2019/02/17/Linux常用命令/</id>
    <published>2019-02-17T02:07:00.000Z</published>
    <updated>2019-02-17T09:40:12.031Z</updated>
    
    <content type="html"><![CDATA[<p>就是做了一些整理~常用系统工作命令，系统状态检测命令，工作目录切换命令，文本文件编辑命令，文件目录管理命令，打包压缩与搜索命令~<br><a id="more"></a></p><h3 id="常用系统工作命令"><a href="#常用系统工作命令" class="headerlink" title="常用系统工作命令"></a>常用系统工作命令</h3><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><p>echo 命令用于在终端输出字符串或变量提取后的值，格式为“echo [字符串 | $变量]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# echo Linuxprobe.Com</span><br><span class="line">Linuxprobe.Com</span><br><span class="line">[root@linuxprobe ~]# echo $SHELL</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>date 命令用于显示及设置系统的时间或日期，格式为“date [选项] [+指定的格式]”。</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>%t</td><td style="text-align:center">跳格[Tab 键]</td></tr><tr><td>%H</td><td style="text-align:center">小时（00～23)</td></tr><tr><td>%I</td><td style="text-align:center">小时（00～12）</td></tr><tr><td>%M</td><td style="text-align:center">分钟（00～59）</td></tr><tr><td>%S</td><td style="text-align:center">秒（00～59）</td></tr><tr><td>%j</td><td style="text-align:center">今年中的第几天</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ]# date</span><br><span class="line">Mon Aug 24 16:11:23 CST 20</span><br><span class="line">[root@linuxprobe ~]# date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">2017-08-24 16:29:12</span><br><span class="line">[root@linuxprobe ~]# date -s &quot;20170901 8:30:00&quot;</span><br><span class="line">Fri Sep 1 08:30:00 CST 2017</span><br><span class="line">[root@linuxprobe ~]# date</span><br><span class="line">Fri Sep 1 08:30:01 CST 2017</span><br><span class="line">[root@linuxprobe ~]# date &quot;+%j&quot;</span><br><span class="line">244</span><br></pre></td></tr></table></figure><h4 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h4><p>reboot 命令用于重启系统其格式为 rebo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ]# rebo</span><br></pre></td></tr></table></figure></p><h4 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h4><p>poweroff 命令用于关闭系统，其格式为 powerof</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# powero</span><br></pre></td></tr></table></figure><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><p>wget 命令用于在终端中下载网络文件，格式为“wget [参数] 下载地址”</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>-b</td><td style="text-align:center">后台下载模式</td></tr><tr><td>-P</td><td style="text-align:center">下载到指定目录</td></tr><tr><td>-t</td><td style="text-align:center">最大尝试次数</td></tr><tr><td>-c</td><td style="text-align:center">断点续传</td></tr><tr><td>-p</td><td style="text-align:center">下载页面内所有资源，包括图片、视频等</td></tr><tr><td>-r</td><td style="text-align:center">递归下载</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# wget http://www.linuxprobe.com/docs/LinuxProbe.pdf</span><br></pre></td></tr></table></figure><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>ps 命令用于查看系统中的进程状态，格式为“ps [参数]”。</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>-a</td><td style="text-align:center">显示所有进程（包括其他用户的进程）</td></tr><tr><td>-u</td><td style="text-align:center">用户以及其他详细信息</td></tr><tr><td>-x</td><td style="text-align:center">显示没有控制终端的进程</td></tr></tbody></table><p>➢R(运行)：进程正在运行或在运行队列中等待。</p><p>➢S(中断)：进程处于休眠中，当某个条件形成后或者接收到信号时，则脱离该<br>状态。</p><p>➢D(不可中断)：进程不响应系统异步信号，即便用 kill 命令也不能将其中断。</p><p>➢Z(僵死)：进程已经终止，但进程描述符依然存在, 直到父进程调用 wait4()系统函数后将进程释。</p><p>➢ T(停止)：进程收到停止信号后停止。</p><p>表 2-7 进程(ps -aux)<br><img src="/images/ps-aux.png" alt=""></p><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>top 命令用于动态地监视进程活动与系统负载等信息，其格式为 top。</p><p><img src="/images/top.jpg" alt=""><br>➢ 第 1 行：系统时间、运行时间、登录终端数、系统负载（三个数值分别为 1 分钟、5<br>分钟、15 分钟内的平均值，数值越小意味着负载越低）。</p><p>➢ 第 2 行：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程<br>数。</p><p>➢ 第 3 行：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源<br>百分比、空闲的资源百分比等</p><p>➢ 第 4 行：物理内存总量、内存使用量、内存空闲量、作为内核缓存的内存量。</p><p>➢ 第 5 行：虚拟内存总量、虚拟内存使用量、虚拟内存空闲量、已被提前加载的内</p><h4 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h4><p>pidof 命令用于查询某个指定服务进程的 PID 值，格式为“pidof [参数] [服务名称]”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe]# pidof sshd</span><br><span class="line">2156</span><br></pre></td></tr></table></figure><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>kill 命令用于终止某个指定 PID 的服务进程，格式为“kill [参数] [进程 PID]”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ]# kill  -9 2156</span><br></pre></td></tr></table></figure><h4 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h4><p>用于终止某个指定名称的服务所对应的全部进程，格式为：“killall [参数] [服<br>务名称]”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# pidof httpd</span><br><span class="line">13581 13580 13579 13578 13577 13576</span><br><span class="line">[root@linuxprobe ~]# killall httpd</span><br><span class="line">[root@linuxprobe ~]# pidof httpd</span><br><span class="line">[root@linuxprobe ~]#</span><br></pre></td></tr></table></figure><h3 id="系统状态检测命令"><a href="#系统状态检测命令" class="headerlink" title="系统状态检测命令"></a>系统状态检测命令</h3><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>ifconfig 命令用于获取网卡配置与网络状态等信息，格式为“ifconfig [网络设备] [参数]。</p><p>主要查看的就<br>是网卡名称、inet 参数后面的 IP 地址、ether 参数后面的网卡物理地址（又称为 MAC 地址），<br>以及 RX、TX 的接收数据包与发送数据包的个数及累计流量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# ifconfig</span><br><span class="line">eno16777728: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500</span><br><span class="line">inet 192.168.10.10 netmask 255.255.255.0 broadcast 192.168.10.255</span><br><span class="line">inet6 fe80::20c:29ff:fec4:a409 prefixlen 64 scopeid 0x20&lt;link&gt;</span><br><span class="line">ether 00:0c:29:c4:a4:09 txqueuelen 1000 (Ethernet)</span><br><span class="line">RX packets 36 bytes 3176 (3.1 KiB)</span><br><span class="line">RX errors 0 dropped 0 overruns 0 frame 0</span><br><span class="line">TX packets 38 bytes 4757 (4.6 KiB)</span><br><span class="line">TX errors 0 dropped 0 overruns 0 carrier 0 collisions </span><br><span class="line">0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536inet 127.0.0.1 netmask 255.0.0.0inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt;loop txqueuelen 0 (Local Loopback)RX packets 386 bytes 32780 (32.0 KiB)RX errors 0 dropped 0 overruns 0 frame 0TX packets 386 bytes 32780 (32.0 KiB)TX errors 0 dropped 0 overruns 0 carrier 0 collisions</span><br></pre></td></tr></table></figure></p><h4 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h4><p>uname 命令用于查看系统内核与系统版本等信息，格式为“uname [-a]”。</p><p>在使用 uname 命令时，一般会固定搭配上-a 参数来完整地查看当前系统的内核名称、主<br>机名、内核发行版本、节点名、系统时间、硬件名称、硬件平台、处理器类型以及操作系统名<br>称等信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# uname -a</span><br><span class="line">Linux linuxprobe.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017</span><br><span class="line">x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><h4 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h4><p>uptime 用于查看系统的负载信息，格式为 uptime。</p><p>uptime 命令真的很棒，它可以显示当前系统时间、系统已运行时间、启用终端数量以<br>及平均负载值等信息。平均负载值指的是系统在最近 1 分钟、5 分钟、15 分钟内的压力情<br>况；负载值越低越好，尽量不要长期超过 1，在生产环境中不要超<br>过 5。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# uptime</span><br><span class="line">22:49:55 up 10 min, 2 users, load average: 0.01, 0.19, 0.18</span><br></pre></td></tr></table></figure></p><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p>free 用于显示当前系统中内存的使用量信息，格式为“free [-h]”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ]# free</span><br></pre></td></tr></table></figure></p><p><img src="/images/free-h.jpg" alt=""></p><h4 id="who"><a href="#who" class="headerlink" title="who"></a>who</h4><p>who 命令用于查看当前登入主机的用户终端信息，格式为“who [参数]”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# who</span><br></pre></td></tr></table></figure></p><h4 id="last"><a href="#last" class="headerlink" title="last"></a>last</h4><p>last 命令用于查看所有系统的登录记录，格式为“last [参数]”。<br>使用 last 命令可以查看本机的登录记录。但是，由于这些信息都是以日志文件的形式保<br>存在系统中，因此黑客可以很容易地对内容进行篡改。千万不要单纯以该命令的输出信息而<br>判断系统有无被恶意入侵！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# last</span><br><span class="line">root pts/0 :0 Mon Aug 24 17:52 still logged in</span><br><span class="line">root :0 :0 Mon Aug 24 17:52 still logged in</span><br><span class="line">(unknown :0 :0 Mon Aug 24 17:50 - 17:52 (00:02)</span><br><span class="line">reboot system boot 3.10.0-123.el7.x Tue Aug 25 01:49 - 18:17 (-7:-32)</span><br><span class="line">root pts/0 :0 Mon Aug 24 15:40 - 08:54 (7+17:14)</span><br><span class="line">root pts/0 :0 Fri Jul 10 10:49 - 15:37 (45+04:47)</span><br><span class="line">………………省略部分登录信息………………</span><br></pre></td></tr></table></figure></p><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><p>history 命令用于显示历史执行过的命令，格式为“history [-c]”。<br>history 命令应该是作者最喜欢的命令。执行 history 命令能显示出当前用户在本地计算机<br>中执行过的最近 1000 条命令记录。如果觉得 1000 不够用，还可以自定义/etc/profile 文件中的<br>HISTSIZE 变量值。在使用 history 命令时，如果使用-c 参数则会清空所有的命令历史记录。<br>还可以使用“!编码数字”的方式来重复执行某一次的命令。总之，history 命令有很多有趣的玩法等待您去开发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# history</span><br><span class="line">1 tar xzvf VMwareTools-9.9.0-2304977.tar.gz</span><br><span class="line">2 cd vmware-tools-distrib/</span><br><span class="line">3 ls</span><br><span class="line">4 ./vmware-install.pl -d</span><br><span class="line">5 reboot</span><br><span class="line">6 df -h</span><br><span class="line">7 cd /run/media/</span><br><span class="line">8 ls</span><br><span class="line">9 cd root/</span><br><span class="line">10 ls</span><br><span class="line">11 cd VMware\ Tools/</span><br><span class="line">12 ls</span><br><span class="line">13 cp VMwareTools-9.9.0-2304977.tar.gz /home</span><br><span class="line">14 cd /home</span><br><span class="line">15 ls</span><br><span class="line">16 tar xzvf VMwareTools-9.9.0-2304977.tar.gz</span><br><span class="line">17 cd vmware-tools-distrib/</span><br><span class="line">18 ls</span><br><span class="line">19 ./vmware-install.pl -d</span><br><span class="line">20 reboot</span><br><span class="line">21 history</span><br><span class="line">[root@linuxprobe ~]# !15</span><br><span class="line">anaconda-ks.cfg Documents initial-setup-ks.cfg Pictures Templates</span><br><span class="line">Desktop Downloads Music Public Videos</span><br><span class="line"></span><br><span class="line">[root@linuxprobe ~]# cat ~/.bash_history</span><br><span class="line">[root@linuxprobe ~]# history -c  //清除</span><br></pre></td></tr></table></figure><h4 id="sosreport"><a href="#sosreport" class="headerlink" title="sosreport"></a>sosreport</h4><p>sosreport 命令用于收集系统配置及架构信息并输出诊断文档，格式为 sosreport。<br>这个用的不多，需要的自己查资料~</p><h3 id="工作目录切换命令"><a href="#工作目录切换命令" class="headerlink" title="工作目录切换命令"></a>工作目录切换命令</h3><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p>pwd 命令用于显示用户当前所处的工作目录，格式为“pwd [选项]”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe etc]# pwd</span><br><span class="line">/etc</span><br></pre></td></tr></table></figure></p><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>cd 命令用于切换工作路径，格式为“cd [目录名称]”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# cd /etc //进入</span><br><span class="line">[root@linuxprobe bin]# cd -  //返回上次</span><br><span class="line">[root@linuxprobe etc]# cd ~  //用户家目录</span><br></pre></td></tr></table></figure></p><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>ls 命令用于显示目录中的文件信息，格式为“ls [选项] [文件] ”。</p><p>所处的工作目录不同，当前工作目录下的文件肯定也不同。使用 ls 命令的“-a”参数看<br>到全部文件（包括隐藏文件），使用“-l”参数可以查看文件的属性、大小等详细信息。将这<br>两个参数整合之后，再执行 ls 命令即可查看当前目录中的所有文件并输出这些文件的属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# ls -al</span><br><span class="line">total 60</span><br><span class="line">dr-xr-x---. 14 root root 4096 May 4 07:56 .</span><br><span class="line">drwxr-xr-x. 17 root root 4096 May 4 15:55 ..</span><br><span class="line">省略............</span><br></pre></td></tr></table></figure></p><p>如果想要查看目录属性信息，则需要额外添加一个-d 参数。例如，可使用如下命令查看<br>/etc 目录的权限与属性信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# ls -ld /etcdrwxr-xr-x. 132 root root 8192 Jul 10 10:48 /e</span><br></pre></td></tr></table></figure></p><h3 id="文本文件编辑命令"><a href="#文本文件编辑命令" class="headerlink" title="文本文件编辑命令"></a>文本文件编辑命令</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>cat 命令用于查看纯文本文件（内容较少的），格式为“cat [选项] [文件]”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# cat -n initial-setup-ks.cfg</span><br><span class="line">1 #version=RHEL7</span><br><span class="line">2 # X Window System configuration information</span><br><span class="line">3 xconfig --startxonboot</span><br><span class="line">省略..............</span><br></pre></td></tr></table></figure></p><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>more 命令用于查看纯文本文件（内容较多的），格式为“more [选项]文件”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# more initial-setup-ks.cfg</span><br><span class="line">#version=RHEL7</span><br><span class="line"># X Window System configuration information</span><br><span class="line">省略............</span><br><span class="line">--More--(43%)</span><br></pre></td></tr></table></figure></p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>head 命令用于查看纯文本文档的前 N 行，格式为“head [选项] [文件]”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# head -n 20 initial-setup-ks.cfg</span><br><span class="line">#version=RHEL7</span><br><span class="line"># X Window System configuration information</span><br><span class="line">省略............</span><br></pre></td></tr></table></figure></p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>tail 命令用于查看纯文本文档的后 N 行或持续刷新内容，格式为“tail [选项] [文件]”。</p><p>tail 命令最强悍的功能是可以持续刷新一个文件的内容，当想要实时<br>查看最新日志文件时，这特别有用，此时的命令格式为“tail -f 文件名”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# tail -f /var/log/messages</span><br><span class="line">May 4 07:56:38 localhost gnome-session: Window manager warning: Log level 16:</span><br><span class="line">STACK_OP_ADD: window 0x1e00001 already in stack</span><br><span class="line">省略............</span><br></pre></td></tr></table></figure></p><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><p>tr 命令用于替换文本文件中的字符，格式为“tr [原始字符] [目标字符]”。</p><p>把某个文本内容中的英文全部替换<br>为大写:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# cat anaconda-ks.cfg | tr [a-z] [A-Z]</span><br></pre></td></tr></table></figure></p><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><p>wc 命令用于统计指定文本的行数、字数、字节数，格式为“wc [参数] 文本”。</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>-l</td><td style="text-align:center">只显示行数</td></tr><tr><td>-w</td><td style="text-align:center">只显示单词数</td></tr><tr><td>-c</td><td style="text-align:center">只显示字节数</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# wc -l /etc/passwd</span><br><span class="line">38 /etc/pass</span><br></pre></td></tr></table></figure><h4 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h4><p>stat 命令用于查看文件的具体存储信息和时间等信息，格式为“stat 文件名称”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# stat anaconda-ks.cfg</span><br><span class="line">File: ‘anaconda-ks.cfg’</span><br><span class="line">Size: 1213 Blocks: 8 IO Block: 4096 regular file</span><br><span class="line">Device: fd00h/64768d Inode: 68912908 Links: 1</span><br><span class="line">Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)</span><br><span class="line">Context: system_u:object_r:admin_home_t:s0</span><br><span class="line">Access: 2017-07-14 01:46:18.721255659 -0400</span><br><span class="line">Modify: 2017-05-04 15:44:36.916027026 -0400</span><br><span class="line">Change: 2017-05-04 15:44:36.916027026 -0400</span><br><span class="line">Birth: -</span><br></pre></td></tr></table></figure></p><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p>cut 命令用于按“列”提取文本字符，格式为“cut [参数] 文本”。</p><p>在 Linux 系统中，如何准确地提取出最想要的数据，这也是我们应该重点学习的内容。一般<br>而言，按基于“行”的方式来提取数据是比较简单的，只需要设置好要搜索的关键词即可。但是<br>如果按列搜索，不仅要使用-f 参数来设置需要看的列数，还需要使用-d 参数来设置间隔符号。<br>passwd 在保存用户数据信息时，用户信息的每一项值之间是采用冒号来间隔的，接下来我们使用<br>下述命令尝试提取出 passwd 文件中的用户名信息，即提取以冒号（：）为间隔符号的第一列内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# head -n 2 /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">[root@linuxprobe ~]# cut -d: -f1 /etc/passwd</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line">sync</span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">ftp</span><br><span class="line">省略...............</span><br></pre></td></tr></table></figure></p><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><p>用于比较多个文本文件的差异，格式为“diff [参数] 文件”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# diff --brief diff_A.txt diff_B.t</span><br><span class="line">*** diff_A.txt 2017-08-30 18:07:45.230864626 +0800</span><br><span class="line">--- diff_B.txt 2017-08-30 18:08:52.203860389 +0800</span><br><span class="line">***************</span><br><span class="line">*** 1,5 ****</span><br><span class="line">! Welcome to linuxprobe.com</span><br><span class="line">Red Hat certified</span><br><span class="line">! Free Linux Lessons</span><br><span class="line">Professional guidance</span><br><span class="line">Linux Course</span><br><span class="line">--- 1,7 ----</span><br><span class="line">! Welcome tooo linuxprobe.com</span><br><span class="line">!</span><br><span class="line">Red Hat certified</span><br><span class="line">! Free Linux LeSSonS</span><br><span class="line">! ////////.....////////</span><br><span class="line">Professional guidance</span><br><span class="line">Linux Course</span><br></pre></td></tr></table></figure></p><h3 id="文件目录管理命令"><a href="#文件目录管理命令" class="headerlink" title="文件目录管理命令"></a>文件目录管理命令</h3><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><p>touch 命令用于创建空白文件或设置文件的时间，格式为“touch [选项] [文件]”。</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>-a</td><td style="text-align:center">仅修改“读取时间”（atime）</td></tr><tr><td>-m</td><td style="text-align:center">仅修改“修改时间”（mtime）</td></tr><tr><td>-d</td><td style="text-align:center">同时修改 atime 与 mtime</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# ls -l anaconda-ks.cfg</span><br><span class="line">-rw-------. 1 root root 1213 May 4 15:44 anaconda-ks.cfg</span><br><span class="line">[root@linuxprobe ~]# echo &quot;Visit the LinuxProbe.com to learn linux skills&quot; &gt;&gt;</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">[root@linuxprobe ~]# ls -l anaconda-ks.cfg</span><br><span class="line">-rw-------. 1 root root 1260 Aug 2 01:26 anaconda-ks.cfg</span><br><span class="line">[root@linuxprobe ~]# touch -d &quot;2017-05-04 15:44&quot; anaconda-ks.cfg</span><br><span class="line">[root@linuxprobe ~]# ls -l anaconda-ks.cfg</span><br><span class="line">-rw-------. 1 root root 1260 May 4 15:44 anaconda-ks.cfg</span><br></pre></td></tr></table></figure><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p>mkdir 命令用于创建空白的目录，格式为“mkdir [选项] 目录”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# mkdir linuxprobe</span><br><span class="line">[root@linuxprobe ~]# cd linuxprobe</span><br><span class="line">[root@linuxprobe linuxprobe]# mkdir -p a/b/c/d/e</span><br><span class="line">[root@linuxprobe linuxprobe]# cd a</span><br><span class="line">[root@linuxprobe a]# cd b</span><br><span class="line">[root@linuxprobe b]#</span><br></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p>cp 命令用于复制文件或目录，格式为“cp [选项] 源文件 目标文件”。</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>-p</td><td style="text-align:center">保留原始文件的属性</td></tr><tr><td>-d</td><td style="text-align:center">若对象为“链接文件”，则保留该“链接文件”的属性</td></tr><tr><td>-r</td><td style="text-align:center">递归持续复制（用于目录）</td></tr><tr><td>-i</td><td style="text-align:center">若目标文件存在则询问是否覆盖</td></tr><tr><td>-a</td><td style="text-align:center">相当于-pdr（p、d、r 为上述参数）</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# touch install.log</span><br><span class="line">[root@linuxprobe ~]# cp install.log x.log</span><br><span class="line">[root@linuxprobe ~]# ls</span><br><span class="line">install.log x.log</span><br></pre></td></tr></table></figure><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p>mv 命令用于剪切文件或将文件重命名，格式为“mv [选项] 源文件 [目标路径|目标文件名]”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# mv x.log linux.log</span><br><span class="line">[root@linuxprobe ~]# ls</span><br><span class="line">install.log linux.log</span><br></pre></td></tr></table></figure><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p>rm 命令用于删除文件或目录，格式为“rm [选项] 文件”。</p><p>想要删除一个目录，<br>需要在 rm 命令后面一个-r 参数才可以。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# rm install.log</span><br><span class="line">rm: remove regular empty file ‘install.log’? y</span><br><span class="line">[root@linuxprobe ~]# rm -f linux.log</span><br><span class="line">[root@linuxprobe ~]# ls</span><br><span class="line">[root@linuxprobe ~]#</span><br></pre></td></tr></table></figure></p><h4 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h4><p>dd 命令用于按照指定大小和个数的数据块来复制文件或转换文件，格式为“dd [参数]”。</p><p>dd 命令是一个比较重要而且比较有特色的一个命令，它能够让用户按照指定大小和个数<br>的数据块来复制文件的内容。当然如果愿意的话，还可以在复制过程中转换其中的数据。Linux<br>系统中有一个名为/dev/zero 的设备文件，每次在课堂上解释它时都充满哲学理论的色彩。因<br>为这个文件不会占用系统存储空间，但却可以提供无穷无尽的数据，因此可以使用它作为 dd<br>命令的输入文件，来生成一个指定大小的文件。</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>if</td><td style="text-align:center">输入的文件名称</td></tr><tr><td>of</td><td style="text-align:center">输出的文件名称</td></tr><tr><td>bs</td><td style="text-align:center">设置每个“块”的大小</td></tr><tr><td>count</td><td style="text-align:center">设置要复制“块”的个数</td></tr></tbody></table><p>例如我们可以用 dd 命令从/dev/zero 设备文件中取出一个大小为 560MB 的数据块，然后<br>保存成名为 560_file 的文件。在理解了这个命令后，以后就能随意创建任意大小的文件了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# dd if=/dev/zero of=560_file count=1 bs=560M</span><br><span class="line">1+0 records in</span><br><span class="line">1+0 records out</span><br><span class="line">587202560 bytes (587 MB) copied, 27.1755 s, 21.6 MB/s</span><br></pre></td></tr></table></figure></p><p>dd 命令的功能也绝不仅限于复制文件这么简单。如果您想把光驱设备中的光盘制作成 iso 格<br>式的镜像文件，在 Windows 系统中需要借助于第三方软件才能做到，但在 Linux 系统中可以直接<br>使用 dd 命令来压制出光盘镜像文件，将它变成一个可立即使用的 iso 镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# dd if=/dev/cdrom of=RHEL-server-7.0-x86_64-LinuxProbe.Com.iso</span><br><span class="line">7311360+0 records in</span><br><span class="line">7311360+0 records out</span><br><span class="line">3743416320 bytes (3.7 GB) copied, 370.758 s, 10.1 MB/s</span><br></pre></td></tr></table></figure></p><p>考虑到有些读者会纠结 bs 块大小与 count 块个数的关系，下面举一个吃货的例子进行<br>解释。假设小明的饭量（即需求）是一个固定的值，用来盛饭的勺子的大小即 bs 块大小，<br>而用勺子盛饭的次数即 count 块个数。小明要想吃饱（满足需求），则需要在勺子大小（bs 块<br>大小）与用勺子盛饭的次数（count 块个数）之间进行平衡。勺子越大，用勺子盛饭的次数就越少。由上可见，bs 与 count 都是用来指定容量的大小，只要能满足需求，可随意组合搭配方<br>式。</p><h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><p>file 命令用于查看文件的类型，格式为“file 文件名”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# file anaconda-ks.cfg</span><br><span class="line">anaconda-ks.cfg: ASCII text</span><br><span class="line">[root@linuxprobe ~]# file /dev/sda</span><br><span class="line">/dev/sda: block special</span><br></pre></td></tr></table></figure></p><h3 id="打包压缩与搜索命令"><a href="#打包压缩与搜索命令" class="headerlink" title="打包压缩与搜索命令"></a>打包压缩与搜索命令</h3><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>tar 命令用于对文件进行打包压缩或解压，格式为“tar [选项] [文件]”。</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>-c</td><td style="text-align:center">创建压缩文件</td></tr><tr><td>-x</td><td style="text-align:center">解开压缩文件</td></tr><tr><td>-t</td><td style="text-align:center">查看压缩包里面有哪些文件</td></tr><tr><td>-z</td><td style="text-align:center">用Gzip压缩或解压</td></tr><tr><td>-j</td><td style="text-align:center">用bzip2压缩或解压</td></tr><tr><td>-v</td><td style="text-align:center">显示压缩或解压过程</td></tr><tr><td>-f</td><td style="text-align:center">目标文件名</td></tr><tr><td>-P</td><td style="text-align:center">保存原始的权限与属性</td></tr><tr><td>-p</td><td style="text-align:center">使用绝对路径来压缩</td></tr><tr><td>-C</td><td style="text-align:center">指定解压目录</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# tar -czvf etc.tar.gz /etc</span><br><span class="line">[root@linuxprobe ~]# mkdir /root/etc</span><br><span class="line">[root@linuxprobe ~]# tar xzvf etc.tar.gz -C /root/etc</span><br></pre></td></tr></table></figure><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>grep 命令用于在文本中执行关键词搜索，并显示匹配的结果，格式为“grep [选项] [文件]”。</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>-b</td><td style="text-align:center">将可执行文件（binary）当作文本文件（text）来搜索</td></tr><tr><td>-c</td><td style="text-align:center">仅显示找到的行数</td></tr><tr><td>-i</td><td style="text-align:center">忽略大小写</td></tr><tr><td>-n</td><td style="text-align:center">显示行号</td></tr><tr><td>-v</td><td style="text-align:center">反向选择—仅列出没有“关键词”的行</td></tr></tbody></table><p>在 Linux 系统中，/etc/passwd 文件是保存着所有的用户信息，而一旦用户的登录终端被<br>设置成/sbin/nologin，则不再允许登录系统，因此可以使用 grep 命令来查找出当前系统中不允<br>许登录系统的所有用户信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@linuxprobe ~]# grep /sbin/nologin /etc/passwd</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">………………省略部分输出过程信息………………</span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>find 命令用于按照指定条件来查找文件，格式为“find [查找路径] 寻找条件 操作”。</p><p>在 Linux 系统中，搜索工作一般都是通过 find 命令来完成的，它可以使用不同的文件特性作<br>为寻找条件（如文件名、大小、修改时间、权限等信息），一旦匹配成功则默认将信息显示到<br>屏幕上。</p><table><thead><tr><th>参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>-name</td><td style="text-align:center">匹配名称</td></tr><tr><td>-perm</td><td style="text-align:center">匹配权限（mode 为完全匹配，-mode 为包含即可）</td></tr><tr><td>-user</td><td style="text-align:center">匹配所有者</td></tr><tr><td>-group</td><td style="text-align:center">匹配所有组</td></tr><tr><td>-mtime -n +n</td><td style="text-align:center">匹配修改内容的时间（-n 指 n 天以内，+n 指 n 天以前）</td></tr><tr><td>-atime -n +n</td><td style="text-align:center">匹配访问文件的时间（-n 指 n 天以内，+n 指 n 天以前）</td></tr><tr><td>-ctime -n +n</td><td style="text-align:center">匹配修改文件权限的时间（-n 指 n 天以内，+n 指 n 天以前）</td></tr><tr><td>-nouser</td><td style="text-align:center">匹配无所有者的文件</td></tr><tr><td>-nogroup</td><td style="text-align:center">匹配无所有组的文件</td></tr><tr><td>-newer f1 !f2</td><td style="text-align:center">匹配比文件 f1 新但比 f2 旧的文件</td></tr><tr><td>–type b/d/c/p/l/f</td><td style="text-align:center">匹配文件类型（后面的字母参数依次表示块设备、目录、字符设备、管道、链接文件、文本文件）</td></tr><tr><td>-size</td><td style="text-align:center">匹配文件的大小（+50KB 为查找超过 50KB 的文件，而-50KB 为查找小于 50KB 的文件）</td></tr><tr><td>-prune</td><td style="text-align:center">忽略某个目录</td></tr><tr><td>-exec …… {}\;</td><td style="text-align:center">后面可跟用于进一步处理搜索结果的命令</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//获取到该目录中所有以 host 开头的文件列表</span><br><span class="line">[root@linuxprobe ~]# find /etc -name &quot;host*&quot; -print</span><br><span class="line">/etc/avahi/hosts</span><br><span class="line">/etc/host.conf</span><br><span class="line">/etc/hosts</span><br><span class="line">/etc/hosts.allow</span><br><span class="line">/etc/hosts.deny</span><br><span class="line">/etc/hostname</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在整个文件系统中找出所有归属于linuxprobe用户的文件并复制到/root/findresults目录</span><br><span class="line">[root@linuxprobe ~]# find / -user linuxprobe -exec cp -a &#123;&#125; /root/findresults/ \;</span><br></pre></td></tr></table></figure><blockquote><p>参考书籍<a href="https://www.linuxprobe.com/chapter-00.html" target="_blank" rel="noopener">《LinuxProbe》</a></p></blockquote><h3 id="Linux命令查找"><a href="#Linux命令查找" class="headerlink" title="Linux命令查找"></a><a href="http://man.linuxde.net/xinshoumingling" target="_blank" rel="noopener">Linux命令查找</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就是做了一些整理~常用系统工作命令，系统状态检测命令，工作目录切换命令，文本文件编辑命令，文件目录管理命令，打包压缩与搜索命令~&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://liupeng.world/categories/Linux/"/>
    
    
      <category term="command" scheme="http://liupeng.world/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>OSI参考模型图</title>
    <link href="http://liupeng.world/2019/02/13/OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E5%9B%BE/"/>
    <id>http://liupeng.world/2019/02/13/OSI参考模型图/</id>
    <published>2019-02-13T13:25:29.000Z</published>
    <updated>2019-02-13T13:27:44.184Z</updated>
    
    <content type="html"><![CDATA[<p>这是一张很长很详细的图~<br><a id="more"></a><br><img src="/images/osi.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一张很长很详细的图~&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ReentrantLock与锁</title>
    <link href="http://liupeng.world/2019/02/10/ReentrantLock%E4%B8%8E%E9%94%81/"/>
    <id>http://liupeng.world/2019/02/10/ReentrantLock与锁/</id>
    <published>2019-02-10T02:00:29.000Z</published>
    <updated>2019-02-10T02:14:05.128Z</updated>
    
    <content type="html"><![CDATA[<p>ReentrantLock与锁之间的区别及使用~<br><a id="more"></a></p><ul><li>ReentrantLock（重入锁）与synchronize区别<ul><li>可重入性：两个都是可以重入的进行锁的计数</li><li>锁的实现：ReentrantLock用的是程序实现（用户态），synchronized用的是JVM实现（内核态）</li><li>性能的区别：synchronized（轻量级锁，偏向锁）经过优化后和ReentrantLock性能差不多</li><li>功能区别：ReentrantLock更加的灵活（细粒度高），synchronized更加便利  </li></ul></li></ul><ul><li>ReentrantLock（重入锁）独有的功能<ul><li>可以指定是公平锁还是非公平锁</li><li>提供了一个Condition类，可以分组唤醒需要唤醒的线程</li><li>提供能够中断等待锁的线程的机制，lock.lockInterrupibly</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//ReentrantLock及Condition使用</span><br><span class="line">@Slf4j</span><br><span class="line">public class ConditionExample &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ReentrantLock reentrantLock = new ReentrantLock();</span><br><span class="line">Condition condition = reentrantLock.newCondition();</span><br><span class="line"></span><br><span class="line">new Thread(() -&gt; &#123;</span><br><span class="line">try&#123;</span><br><span class="line">reentrantLock.lock();</span><br><span class="line">log.info(&quot;wait signal&quot;);// 1</span><br><span class="line">condition.await();</span><br><span class="line">&#125;catch(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">log.info(&quot;get signal&quot;);// 4</span><br><span class="line">reentrantLock.unlock();</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">new Thread(() -&gt; &#123;</span><br><span class="line">reentrantLock.lock();</span><br><span class="line">log.info(&quot;get Lock&quot;);// 2</span><br><span class="line">try&#123;</span><br><span class="line">Thread.sleep(3000);</span><br><span class="line">&#125;catch(InterruptedException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">condition.signalAll();</span><br><span class="line">log.info(&quot;send signal ~&quot;);// 3</span><br><span class="line">reentrantLock.unlock();</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ReentrantLock与锁之间的区别及使用~&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java线程类测试</title>
    <link href="http://liupeng.world/2019/02/08/Java%E7%BA%BF%E7%A8%8B%E7%B1%BB%E6%B5%8B%E8%AF%95/"/>
    <id>http://liupeng.world/2019/02/08/Java线程类测试/</id>
    <published>2019-02-08T09:43:00.000Z</published>
    <updated>2019-02-08T12:59:55.435Z</updated>
    
    <content type="html"><![CDATA[<p>对java中的线程安全类及不安全的类进行测试~<br><a id="more"></a></p><ul><li>线程不安全类<ul><li>StringBuilder -&gt; StringBuffer</li><li>SimpleDateFormat -&gt; JodaTime</li></ul></li><li>同步容器<ul><li>ArrayList -&gt; Vector,Stack</li><li>HashMap -&gt; HashTable(key, value不能为null)</li><li>Collections.synchronizedXXX(List, Set, Map)</li></ul></li><li>并发容器<ul><li>ArrayList -&gt; CopyOnWriteArrayList</li><li>HashSet,TreeSet -&gt; CopyOnWriteArraySet,ConcurrentSkipListSet</li><li>HashMap,TreeMap -&gt; ConcurrentHashMap,ConcurrentSkipListMap</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//可以自行进行测试</span><br><span class="line">public class ConcurrencyTest &#123;</span><br><span class="line"></span><br><span class="line">//请求总数</span><br><span class="line">public static int clientTotal = 5000;</span><br><span class="line">//同时并发执行的线程数</span><br><span class="line">public static int threadTotal = 200;</span><br><span class="line">public static int count = 0;</span><br><span class="line">    </span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">final Semaphore semaphore = new Semaphore(threadTotal);</span><br><span class="line">final CountDownLatch countDownLatch = new CountDownLatch(clientTotal);</span><br><span class="line">for (int i = 0; i &lt; clientTotal; i++) &#123;</span><br><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">try&#123;</span><br><span class="line">semaphore.acquire();</span><br><span class="line">add();</span><br><span class="line">semaphore.release();</span><br><span class="line">&#125; catch (Exception e)&#123;</span><br><span class="line">log.error(&quot;exception&quot; , e);</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.countDown();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.await();</span><br><span class="line">executorService.shutdown();</span><br><span class="line">log.info(&quot;count:&#123;&#125;&quot; , count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void add()&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对java中的线程安全类及不安全的类进行测试~&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://liupeng.world/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java线程封闭</title>
    <link href="http://liupeng.world/2019/02/08/Java%E7%BA%BF%E7%A8%8B%E5%B0%81%E9%97%AD/"/>
    <id>http://liupeng.world/2019/02/08/Java线程封闭/</id>
    <published>2019-02-08T07:59:00.000Z</published>
    <updated>2019-02-08T08:10:26.750Z</updated>
    
    <content type="html"><![CDATA[<p>java是如何保持线程之间的不互相干扰？<br><a id="more"></a></p><ul><li>线程封闭<ul><li>Ad-hoc线程封闭：程序控制，最糟糕，忽略</li><li>堆栈封闭：局部变量(利用不同的虚拟机栈副本存储)</li><li>ThreadLocal线程封闭：特别好的封闭方法</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//ThreadLocal线程封闭</span><br><span class="line">public class RequestHolder &#123;</span><br><span class="line"></span><br><span class="line">private final static ThreadLocal&lt;Long&gt; requestHolder = new ThreadLocal&lt;Long&gt;();</span><br><span class="line"></span><br><span class="line">public static void add(Long id)&#123;</span><br><span class="line">requestHolder.set(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static Long getId()&#123;</span><br><span class="line">      //自动获取key(当前线程对象地址),找出value值返回</span><br><span class="line">return requestHolder.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void remove()&#123;</span><br><span class="line">      //数据会一直存到项目重启</span><br><span class="line">      //数据一定要移除，避免产生内存溢出(oom)</span><br><span class="line">requestHolder.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java是如何保持线程之间的不互相干扰？&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://liupeng.world/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java不可变对象</title>
    <link href="http://liupeng.world/2019/02/07/java%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/"/>
    <id>http://liupeng.world/2019/02/07/java不可变对象/</id>
    <published>2019-02-07T14:53:00.000Z</published>
    <updated>2019-02-07T15:04:12.184Z</updated>
    
    <content type="html"><![CDATA[<p>不可变对象定义，作用，使用方式详解。<br><a id="more"></a></p><ul><li>不可变对象需要满足的条件：<ul><li>对象创建以后其状态就不能修改</li><li>对象所有域都是final类型</li><li>对象时正确创建的（在对象创建期间，this引用没有逸出）</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//final关键字：类，方法，变量</span><br><span class="line">//修饰类：不能被继承</span><br><span class="line">//修饰方法：1.锁定方法不能被继承类修改（默认为private）;2.效率</span><br><span class="line">//修饰变量：基本数据类型变量，引用类型变量</span><br><span class="line">@Slf4j</span><br><span class="line">@NotThreadSafe</span><br><span class="line">public class ImmutableFinal &#123;</span><br><span class="line">private final static Integer a = 1;</span><br><span class="line">private final static String b = &quot;2&quot;;</span><br><span class="line">//guava</span><br><span class="line">private final static Map&lt;Integer, Integer&gt; map = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">map.put(1, 2);</span><br><span class="line">map.put(3, 4);</span><br><span class="line">map.put(5, 6);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">//a = 2;</span><br><span class="line">//b = &quot;3&quot;;</span><br><span class="line">//map = Maps.newHashMap();</span><br><span class="line">//map引用不能修改，但是内部的值还是可以进行修改~</span><br><span class="line">map.put(1, 3);</span><br><span class="line">log.info(&quot;&#123;&#125;&quot;,map.get(1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//final参数不能修改</span><br><span class="line">private void test(final int a)&#123;</span><br><span class="line">// a = 1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">////利用基本的类库进行不可变Map对象的创建（内部参数也不可以改变）</span><br><span class="line">@Slf4j</span><br><span class="line">@ThreadSafe</span><br><span class="line">public class ImmutableMap &#123;</span><br><span class="line">private static Map&lt;Integer, Integer&gt; map = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">static&#123;</span><br><span class="line">map.put(1, 2);</span><br><span class="line">map.put(3, 4);</span><br><span class="line">map.put(5, 6);</span><br><span class="line">//java</span><br><span class="line">map = Collections.unmodifiableMap(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//会报错哈~UnsupportedOperationException</span><br><span class="line">map.put(1, 3);</span><br><span class="line">log.info(&quot;&#123;&#125;&quot;, map.get(1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//利用Guava的类库进行不可变Map对象的创建（内部参数也不可以改变）</span><br><span class="line">@ThreadSafe</span><br><span class="line">public class ImmutableGuava &#123;</span><br><span class="line">    private final static ImmutableList&lt;Integer&gt; list = ImmutableList.of(1, 2, 3);</span><br><span class="line"></span><br><span class="line">    private final static ImmutableSet set = ImmutableSet.copyOf(list);</span><br><span class="line"></span><br><span class="line">    private final static ImmutableMap&lt;Integer, Integer&gt; map = ImmutableMap.of(1, 2, 3, 4);</span><br><span class="line"></span><br><span class="line">    private final static ImmutableMap&lt;Integer, Integer&gt; map2 = ImmutableMap.&lt;Integer, Integer&gt;builder()</span><br><span class="line">            .put(1, 2).put(3, 4).put(5, 6).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(map2.get(3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不可变对象定义，作用，使用方式详解。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://liupeng.world/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>jdk，jre你真的懂吗？</title>
    <link href="http://liupeng.world/2019/02/07/jdk%EF%BC%8Cjre%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%87%82%E5%90%97%EF%BC%9F/"/>
    <id>http://liupeng.world/2019/02/07/jdk，jre你真的懂吗？/</id>
    <published>2019-02-07T14:19:00.000Z</published>
    <updated>2019-02-07T14:40:01.384Z</updated>
    
    <content type="html"><![CDATA[<p>关于jdk和jre </p><p>大家肯定在安装JDK的时候会有选择是否安装单独的jre，一般都会一起安装，我也建议大家这样做。因为这样更能帮助大家弄清楚它们的区别：<br><a id="more"></a><br>Jre 是java runtime environment, 是java程序的运行环境。既然是运行，当然要包含jvm，也就是大家熟悉的虚拟机啦，还有所有java类库的class文件，都在lib目录下打包成了jar。大家可以自己验证。至于在windows上的虚拟机是哪个文件呢？学过MFC的都知道什么是dll文件吧，那么大家看看jre/bin/client里面是不是有一个jvm.dll呢？那就是虚拟机。 </p><p>Jdk 是java development kit，是java的开发工具包，里面包含了各种类库和工具。当然也包括了另外一个Jre. 那么为什么要包括另外一个Jre呢？而且jdk/jre/bin同时有client和server两个文件夹下都包含一个jvm.dll。说明是有两个虚拟机的。这一点不知道大家是否注意到了呢？ </p><p>相信大家都知道jdk的bin下有各种java程序需要用到的命令，与jre的bin目录最明显的区别就是jdk下才有javac，这一点很好理解，因为 jre只是一个运行环境而已。与开发无关，正因为如此，具备开发功能的jdk自己的jre下才会同时有client性质的jvm和server性质的 jvm， 而仅仅作为运行环境的jre下只需要client性质的jvm.dll就够了。 </p><p>记得在环境变量path中设置jdk/bin路径麽？这应该是大家学习Java的第一步吧，老师会告诉大家不设置的话javac和java是用不了的。确实jdk/bin目录下包含了所有的命令。可是有没有人想过我们用的java命令并不是 jdk/bin目录下的而是jre/bin目录下的呢？不信可以做一个实验，大家可以把jdk/bin目录下的java.exe剪切到别的地方再运行 java程序，发现了什么？一切OK！ </p><p>那么有人会问了？我明明没有设置jre/bin目录到环境变量中啊？ </p><p>试想一下如果java为了提供给大多数人使用，他们是不需要jdk做开发的，只需要jre能让java程序跑起来就可以了，那么每个客户还需要手动去设置环境变量多麻烦啊？所以安装jre的时候安装程序自动帮你把jre的java.exe添加到了系统变量中，验证的方法很简单，大家看到了系统环境变量的 path最前面有“%SystemRoot%system32;%SystemRoot%;”这样的配置，那么再去Windows/system32下面去看看吧，发现了什么？有一个java.exe。 </p><p>如果强行能够把jdk/bin挪到system32变量前面，当然也可以迫使使用jdk/jre里面的java，不过除非有必要，我不建议大家这么做。使用单独的jre跑java程序也算是客户环境下的一种测试。 </p><p>——————————————————————————————————————————— </p><p>通俗点来说： jdk是java的开发包，其中包括jre;jre仅仅是java的运行时环境；而JDK包括了同版本的JRE，此外还包括有编译器和其它工具 </p><p><strong>JDK是java开发工具包(java Development Kit)的缩写。它是一种构建在java平台上发布的应用程序、apple和组件的开发环境。JDK是一切java应用程序的基础，所有的java应用程序是构建在这个之上的。它是一组API，也可以说是一些java Class。要成为一个Java程序员，JDK是必不可少的最基本的工具。</strong></p><p><strong>JRE是Java运行环境(Java Runtime Enviroment)的缩写。它基本上就和Java虚拟机是同一个概念。一般来说，在谈论一个具体的产品的时候，可以说“JRE”,而说到理论中的一个模型的时候，我们常用的是“Java虚拟机”。要使用Java程序，JRE是必不可少的环境。</strong></p><p>如果机子里安装了多个版本的jdk，如下： </p><p>BEA Weblogic Server 7.0 自带一套 JDK1.3.1_02<br>下载了一套最新的JDK1.4.1_02<br>JBuilder9自带一套JKD1.4.1_02<br>Oracle8.1.7自带一套JRE1.1.7<br>Ration Rose自带一套JDK1.3<br>DreamWeaver自带一套JDK1.3 </p><p>6套JRE，每套JRE都被各自安装到不同的目录，不会互相影响。当在控制台执行java.exe，操作系统寻找JRE的方式如下：</p><p>先找当前目录下有没有JRE<br>再找父目录下有没有JRE<br>接着在PATH路径中找JRE（一般运行时从path中查找，按照path设置前后顺序，以前面为准）<br>注册表HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\Java Runtime Environment\ 查看CurrentVersion的键值指向哪个JRE（一般XP下是这个：C:\Program Files\Java\jre6）</p><p>最常用的是在PATH路径中找JRE，一般情况下，自己的程序运行之前都会先在批处理文件里面临时设置PATH，把自己用的JRE放到PATH路径最前面，所以肯定会运行自己带的JRE，不会造成版本混乱。 </p><p>——————————————————————————————————————————————<br>JDK就是Java Development Kit.简单的说JDK是面向开发人员使用的SDK，它提供了Java的开发环境和运行环境。SDK是Software Development Kit 一般指软件开发包，可以包括函数库、编译程序等。 </p><p>JRE是Java Runtime Enviroment是指Java的运行环境，是面向Java程序的使用者，而不是开发者。 </p><p>如果安装了JDK，会发同你的电脑有两套JRE，一套位于 \jre 另外一套位于 C:\Program Files\Java\jre1.5.0_15 目录下，后面这套比前面那套少了Server端的Java虚拟机，不过直接将前面那套的Server端Java虚拟机复制过来就行了。而且在安装JDK可以选择是否安装这个位于 C:\Program Files\Java 目录下的JRE。如果你只安装JRE，而不是JDK，那么只会在 C:\Program Files\Java 目录下安装唯一的一套JRE。 </p><p>JRE的地位就象一台PC机一样，我们写好的Win32应用程序需要操作系统帮我们运行，同样的，我们编写的Java程序也必须要JRE才能运行。所以当你装完JDK后，如果分别在硬盘上的两个不同地方安装了两套JRE，那么你可以想象你的电脑有两台虚拟的Java PC机，都具有运行Java程序的功能。所以我们可以说，只要你的电脑安装了JRE，就可以正确运行Java应用程序。</p><ol><li>为什么Sun要让JDK安装两套相同的JRE？ </li></ol><p>这是因为JDK里面有很多用Java所编写的开发工具（如javac.exe、jar.exe等），而且都放置在 \lib\tools.jar 里。从下面例子可以看出，先将tools.jar改名为tools1.jar，然后运行javac.exe，显示如下结果： Exception in thread “main” java.lang.NoClassDefFoundError: com/sun/tools/javac /Main 这个意思是说，你输入javac.exe与输入 java -cp c:\jdk\lib\tools.jar com.sun.tools.javac.Main 是一样的，会得到相同的结果。从这里我们可以证明javac.exe只是一个包装器（Wrapper），而制作的目的是为了让开发者免于输入太长的指命。而且可以发现\lib目录下的程序都很小，不大于2 9K，从这里我们可以得出一个结论。就是JDK里的工具几乎是用Java所编写，所以也是Java应用程序，因此要使用JDK所附的工具来开发Java程序，也必须要自行附一套JRE才行，所以位于C:\Program Files\Java目录下的那套JRE就是用来运行一般Java程序用的。 </p><ol start="2"><li>如果一台电脑安装两套以上的JRE，谁来决定呢？ </li></ol><p>这个重大任务就落在java.exe身上。Java.exe的工作就是找到合适的JRE来运行Java程序。 Java.exe依照底下的顺序来查找JRE：自己的目录下有没有JRE；父目录有没有JRE；查询注册表： [HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft\Java Runtime Environment] 所以java.exe的运行结果与你的电脑里面哪个JRE被执行有很大的关系。 </p><p>ADD：（小小结） </p><ol><li><p>JVM – java virtual machineJVM就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，也就是说class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。</p></li><li><p>JRE – java runtime environmentJRE是指java运行环境。光有JVM还不能成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib。在JDK的安装目录里你可以找到jre目录，里面有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。所以，在你写完java程序编译成.class之后，你可以把这个.class文件和jre一起打包发给朋友，这样你的朋友就可以运行你写程序了。（jre里有运行.class的java.exe）</p></li><li><p>JDK – java development kitJDK是java开发工具包，基本上每个学java的人都会先在机器上装一个JDK，那他都包含哪几部分呢？让我们看一下JDK的安装目录。在目录下面有六个文件夹、一个src类库源码压缩包、和其他几个声明文件。其中，真正在运行java时起作用的是以下四个文件夹：bin、include、lib、 jre。现在我们可以看出这样一个关系，JDK包含JRE，而JRE包含JVM。bin:最主要的是编译器(javac.exe)include:java和JVM交互用的头文件lib：类库jre:java运行环境（注意：这里的bin、lib文件夹和jre里的bin、lib是不同的）总的来说JDK是用于java程序的开发,而jre则是只能运行class而没有编译的功能。 </p></li><li><p>eclipse、idea等其他IDE有自己的编译器而不是用JDK bin目录中自带的，所以在安装时你会发现他们只要求你选中jre路径就ok了。 </p></li></ol><p align="right"><a href="https://ihyperwin.iteye.com/blog/1513754" target="_blank" rel="noopener">ITeye原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jdk和jre &lt;/p&gt;
&lt;p&gt;大家肯定在安装JDK的时候会有选择是否安装单独的jre，一般都会一起安装，我也建议大家这样做。因为这样更能帮助大家弄清楚它们的区别：&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://liupeng.world/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>如何安全发布对象？</title>
    <link href="http://liupeng.world/2019/02/05/%E5%A6%82%E4%BD%95%E5%AE%89%E5%85%A8%E5%8F%91%E5%B8%83%E5%AF%B9%E8%B1%A1%EF%BC%9F/"/>
    <id>http://liupeng.world/2019/02/05/如何安全发布对象？/</id>
    <published>2019-02-05T15:25:00.000Z</published>
    <updated>2019-02-05T15:52:47.682Z</updated>
    
    <content type="html"><![CDATA[<p>安全发布对象详解~<br><a id="more"></a></p><ul><li>在静态初始化函数中初始化一个对象引用</li><li>将对象的引用保存到volatile类型域或者AtomicReference对象中</li><li>将对象的引用保存到某个正确构造对象的final类型域中</li><li>将对象的引用保存到一个由锁保护的域中</li></ul><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 懒汉模式 -》 双重同步锁单例模式</span><br><span class="line"> * 单例实例在第一次使用时进行创建</span><br><span class="line"> */</span><br><span class="line">@ThreadSafe</span><br><span class="line">public class LazySingleton &#123;</span><br><span class="line"></span><br><span class="line">    // 私有构造函数</span><br><span class="line">    private LazySingleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // 1、memory = allocate() 分配对象的内存空间</span><br><span class="line">    // 2、ctorInstance() 初始化对象</span><br><span class="line">    // 3、instance = memory 设置instance指向刚分配的内存</span><br><span class="line"></span><br><span class="line">    // 单例对象 volatile + 双重检测机制 -&gt; 禁止指令重排</span><br><span class="line">    private volatile static LazySingleton instance = null;</span><br><span class="line"></span><br><span class="line">    // 静态的工厂方法</span><br><span class="line">    public static LazySingleton getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123; // 双重检测机制       </span><br><span class="line">            synchronized (LazySingleton.class) &#123; // 同步锁</span><br><span class="line">                if (instance == null) &#123;</span><br><span class="line">                    instance = new LazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 饿汉模式</span><br><span class="line"> * 单例实例在类装载时进行创建</span><br><span class="line"> */</span><br><span class="line">@ThreadSafe</span><br><span class="line">public class HungrySingleton &#123;</span><br><span class="line"></span><br><span class="line">    // 私有构造函数</span><br><span class="line">    private HungrySingleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // 单例对象</span><br><span class="line">    private static HungrySingleton instance = new HungrySingleton();</span><br><span class="line"></span><br><span class="line">   /*</span><br><span class="line">    private static SingletonExample6 instance = null;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        instance = new SingletonExample6();</span><br><span class="line">    &#125;*/</span><br><span class="line">    </span><br><span class="line">    // 静态的工厂方法</span><br><span class="line">    public static HungrySingleton getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 枚举模式：最安全</span><br><span class="line"> */</span><br><span class="line">@ThreadSafe</span><br><span class="line">@Recommend</span><br><span class="line">public class EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">    // 私有构造函数</span><br><span class="line">    private EnumSingleton() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static EnumSingleton getInstance() &#123;</span><br><span class="line">        return Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private enum Singleton &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        </span><br><span class="line">        private EnumSingleton singleton;</span><br><span class="line">        </span><br><span class="line">        // JVM保证这个方法绝对只调用一次</span><br><span class="line">        Singleton() &#123;</span><br><span class="line">            singleton = new EnumSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        public EnumSingleton getInstance() &#123;</span><br><span class="line">            return singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安全发布对象详解~&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://liupeng.world/categories/Java/"/>
    
    
      <category term="Concurrency" scheme="http://liupeng.world/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>发布对象线程安全问题</title>
    <link href="http://liupeng.world/2019/02/05/%E5%8F%91%E5%B8%83%E5%AF%B9%E8%B1%A1%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://liupeng.world/2019/02/05/发布对象线程安全问题/</id>
    <published>2019-02-05T14:33:00.000Z</published>
    <updated>2019-02-05T15:53:10.825Z</updated>
    
    <content type="html"><![CDATA[<p>发布对象，对象逸出并发问题详解<br><a id="more"></a></p><h3 id="发布对象（NotThreadSafe）"><a href="#发布对象（NotThreadSafe）" class="headerlink" title="发布对象（NotThreadSafe）"></a>发布对象（NotThreadSafe）</h3><p>使一个对象能够被当前范围之外的代码所使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@NotThreadSafe</span><br><span class="line">public class UnsafePublish &#123;</span><br><span class="line">private String[] states = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</span><br><span class="line">    </span><br><span class="line">public String[] getStates()&#123;</span><br><span class="line">return states;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">UnsafePublish unsafePublish = new UnsafePublish();</span><br><span class="line">log.info(&quot;&#123;&#125;&quot;, Arrays.toString(unsafePublish.getStates()));</span><br><span class="line">unsafePublish.getStates()[0] = &quot;d&quot;;</span><br><span class="line">log.info(&quot;&#123;&#125;&quot;, Arrays.toString(unsafePublish.getStates()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象逸出（NotThreadSafe）"><a href="#对象逸出（NotThreadSafe）" class="headerlink" title="对象逸出（NotThreadSafe）"></a>对象逸出（NotThreadSafe）</h3><p>一种错误的发布。当一个对象还没有构建完成时，就使它被其他线程所见。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@NotThreadSafe</span><br><span class="line">@NotRecommend</span><br><span class="line">public class Escape &#123;</span><br><span class="line">private int thisCanBeEscape = 0;</span><br><span class="line"></span><br><span class="line">public Escape ()&#123;</span><br><span class="line">new InnerClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private class InnerClass &#123;</span><br><span class="line">public InnerClass()&#123;</span><br><span class="line">//获取的数据是未创建完的对象数据</span><br><span class="line">log.info(&quot;&#123;&#125;&quot;, Escape.this.thisCanBeEscape);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new Escape();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发布对象，对象逸出并发问题详解&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://liupeng.world/categories/Java/"/>
    
    
      <category term="Concurrency" scheme="http://liupeng.world/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>新年快乐</title>
    <link href="http://liupeng.world/2019/02/05/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <id>http://liupeng.world/2019/02/05/新年快乐/</id>
    <published>2019-02-04T16:46:00.000Z</published>
    <updated>2019-02-04T17:17:50.600Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/newYear.jpg" alt=""><br>新年深夜更博~北京四年反省总结<br><a id="more"></a></p><p>在过去一年中，发生了很多大事，家人的离世，房贷的压力，互联网环境的变更，辞职决定去杭州发展，身上的压力是越来越重，我只有不停的学习，不停的进步才能减轻担忧。</p><p>我不是本科，也不是本专业，却走上了程序猿这条路，通过培训获取了当一名程序猿的资格，进了第一家公司不停加班，学习，才让我跟上工作步伐。</p><p>很恨自己中间有一年安逸的日子没有学习，只会玩手机，导致技术的滞后。安逸真的会使人堕落，而我本就没有这样的资格堕落。</p><p>2019新的一年到了，深刻的反省。</p><p>三月份到杭州，我会做一个学习计划，到时候再发博~</p><p>在最后祝大家新年快乐，身体健康，合家团员。</p><p>best wishes:<br>努力的去拥抱生活，让自己变得更好，不要辜负自己的青春，在最灿烂的年纪，绽放最耀眼的光芒。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/newYear.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;新年深夜更博~北京四年反省总结&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://liupeng.world/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>HashMap？面试？我是谁？我在哪</title>
    <link href="http://liupeng.world/2019/02/04/HashMap%EF%BC%9F%E9%9D%A2%E8%AF%95%EF%BC%9F%E6%88%91%E6%98%AF%E8%B0%81%EF%BC%9F%E6%88%91%E5%9C%A8%E5%93%AA/"/>
    <id>http://liupeng.world/2019/02/04/HashMap？面试？我是谁？我在哪/</id>
    <published>2019-02-04T09:11:44.000Z</published>
    <updated>2019-02-04T09:25:17.796Z</updated>
    
    <content type="html"><![CDATA[<p>面试经常被问到做个笔记，emmmmm<br><a id="more"></a></p><h3 id="为什么用HashMap？"><a href="#为什么用HashMap？" class="headerlink" title="为什么用HashMap？"></a>为什么用HashMap？</h3><ul><li>HashMap 是一个散列桶（数组和链表），它存储的内容是键值对 key-value 映射</li><li>HashMap 采用了数组和链表的数据结构，能在查询和修改方便继承了数组的线性查找和链表的寻址修改</li><li>HashMap 是非 synchronized，所以 HashMap 很快</li><li>HashMap 可以接受 null 键和值，而 Hashtable 则不能（原因就是 equlas() 方法需要对象，因为 HashMap 是后出的 API 经过处理才可以）</li></ul><h3 id="HashMap-的工作原理是什么？"><a href="#HashMap-的工作原理是什么？" class="headerlink" title="HashMap 的工作原理是什么？"></a>HashMap 的工作原理是什么？</h3><p><strong>HashMap 是基于 hashing 的原理</strong></p><p>我们使用 put(key, value) 存储对象到 HashMap 中，使用 get(key) 从 HashMap 中获取对象。当我们给 put() 方法传递键和值时，我们先对键调用 hashCode() 方法，计算并返回的 hashCode 是用于找到 Map 数组的 bucket 位置来储存 Node 对象。</p><p>这里关键点在于指出，HashMap 是在 bucket 中储存键对象和值对象，作为Map.Node。</p><p><img src="/images/hashMapBucket.png" alt=""></p><p><strong>以下是 HashMap 初始化</strong><br>简化的模拟数据结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Node[] table = new Node[16]; // 散列桶初始化，table</span><br><span class="line">class Node &#123;</span><br><span class="line">    hash; //hash值</span><br><span class="line">    key; //键</span><br><span class="line">    value; //值</span><br><span class="line">    node next; //用于指向链表的下一层（产生冲突，用拉链法）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下是具体的 put 过程（JDK1.8）</p><ol><li>对 Key 求 Hash 值，然后再计算下标</li><li>如果没有碰撞，直接放入桶中（碰撞的意思是计算得到的 Hash 值相同，需要放到同一个 bucket 中）</li><li>如果碰撞了，以链表的方式链接到后面</li><li>如果链表长度超过阀值（TREEIFY THRESHOLD==8），就把链表转成红黑树，链表长度低于6，就把红黑树转回链表</li><li>如果节点已经存在就替换旧值</li><li>如果桶满了（容量16*加载因子0.75），就需要 resize（扩容2倍后重排）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试经常被问到做个笔记，emmmmm&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Apache Bench</title>
    <link href="http://liupeng.world/2019/02/03/ApacheBench/"/>
    <id>http://liupeng.world/2019/02/03/ApacheBench/</id>
    <published>2019-02-03T08:43:00.000Z</published>
    <updated>2019-02-04T08:04:50.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Apache-Bench简介"><a href="#Apache-Bench简介" class="headerlink" title="Apache Bench简介"></a>Apache Bench简介</h4><p>ApacheBench 是 Apache 服务器自带的一个web压力测试工具，简称ab。ab又是一个命令行工具，对发起负载的本机要求很低，根据ab命令可以创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说ab工具小巧简单，上手学习较快，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。<br><a id="more"></a></p><h4 id="Apache-Bench安装"><a href="#Apache-Bench安装" class="headerlink" title="Apache Bench安装"></a>Apache Bench安装</h4><p>首先需要安装Apache服务器，下载地址：<a href="https://www.apachelounge.com/download/" target="_blank" rel="noopener">https://www.apachelounge.com/download/</a></p><h4 id="Apache-Bench使用"><a href="#Apache-Bench使用" class="headerlink" title="Apache Bench使用"></a>Apache Bench使用</h4><p>了解参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">格式：ab [options] [http://]hostname[:port]/path</span><br><span class="line"></span><br><span class="line">-n requests Number of requests to perform     //本次测试发起的总请求数</span><br><span class="line">-c concurrency Number of multiple requests to make　　 //一次产生的请求数（或并发数）</span><br><span class="line">-t timelimit Seconds to max. wait for responses　　　　//测试所进行的最大秒数，默认没有时间限制。</span><br><span class="line">-r Don&apos;t exit on socket receive errors.     // 抛出异常继续执行测试任务 </span><br><span class="line">-p postfile File containing data to POST　　//包含了需要POST的数据的文件，文件格式如“p1=1&amp;p2=2”.使用方法是 -p 111.txt</span><br><span class="line"></span><br><span class="line">-T content-type Content-type header for POSTing</span><br><span class="line">//POST数据所使用的Content-type头信息，如 -T “application/x-www-form-urlencoded” 。 （配合-p）</span><br><span class="line">-v verbosity How much troubleshooting info to print</span><br><span class="line">//设置显示信息的详细程度 – 4或更大值会显示头信息， 3或更大值可以显示响应代码(404, 200等), 2或更大值可以显示警告和其他信息。 -V 显示版本号并退出。</span><br><span class="line">-C attribute Add cookie, eg. -C “c1=1234,c2=2,c3=3” (repeatable)</span><br><span class="line">//-C cookie-name=value 对请求附加一个Cookie:行。 其典型形式是name=value的一个参数对。此参数可以重复，用逗号分割。</span><br><span class="line">提示：可以借助session实现原理传递 JSESSIONID参数， 实现保持会话的功能，如-C ” c1=1234,c2=2,c3=3, JSESSIONID=FF056CD16DA9D71CB131C1D56F0319F8″ 。</span><br><span class="line">-w Print out results in HTML tables　　//以HTML表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。</span><br><span class="line">-i Use HEAD instead of GET</span><br><span class="line">-x attributes String to insert as table attributes</span><br><span class="line">-y attributes String to insert as tr attributes</span><br><span class="line">-z attributes String to insert as td or th attributes</span><br><span class="line">-H attribute Add Arbitrary header line, eg. ‘Accept-Encoding: gzip’ Inserted after all normal header lines. (repeatable)</span><br><span class="line">-A attribute Add Basic WWW Authentication, the attributes</span><br><span class="line">are a colon separated username and password.</span><br><span class="line">-P attribute Add Basic Proxy Authentication, the attributes are a colon separated username and password.</span><br><span class="line">-X proxy:port Proxyserver and port number to use</span><br><span class="line">-V Print version number and exit</span><br><span class="line">-k Use HTTP KeepAlive feature</span><br><span class="line">-d Do not show percentiles served table.</span><br><span class="line">-S Do not show confidence estimators and warnings.</span><br><span class="line">-g filename Output collected data to gnuplot format file.</span><br><span class="line">-e filename Output CSV file with percentages served</span><br><span class="line">-h Display usage information (this message)</span><br></pre></td></tr></table></figure></p><p>参数倒是挺多的不过，经常用的就是 -n -c ,记得配置path环境变量哈，不然要去bin目录下执行</p><p>例如:</p><p><img src="/images/ApacheBench详解.jpg" align="center"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Apache-Bench简介&quot;&gt;&lt;a href=&quot;#Apache-Bench简介&quot; class=&quot;headerlink&quot; title=&quot;Apache Bench简介&quot;&gt;&lt;/a&gt;Apache Bench简介&lt;/h4&gt;&lt;p&gt;ApacheBench 是 Apache 服务器自带的一个web压力测试工具，简称ab。ab又是一个命令行工具，对发起负载的本机要求很低，根据ab命令可以创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说ab工具小巧简单，上手学习较快，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://liupeng.world/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>开篇博客</title>
    <link href="http://liupeng.world/2019/02/03/%E5%BC%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://liupeng.world/2019/02/03/开篇博客/</id>
    <published>2019-02-03T01:23:00.000Z</published>
    <updated>2019-03-01T02:59:08.030Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/kaipt.jpg" width="50%" height="50%"></p><p>开个博客，写写东西。<br><a id="more"></a><br>很早之间我就想做个博客，写一些技术文档，随笔，却一直没有沉下心来做这件事。</p><p>最近过年才有时间，大概花了1天时间搭建Hexo比想象中的简单多了，之前一直觉得挺麻烦的，也许是因为知识的积累和想拥有一个自己博客的迫切希望才促使我不断的去突破困难搭建完善。</p><p>搭建博客虽然简单，但是持之以恒的去写文章就很难了。我现在开篇立个flag，一周至少更新一篇技术博客，大家监督~</p><p>我一直认为啊~技术宅真的是可以拯救世界的，大家一起加油吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/kaipt.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;开个博客，写写东西。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://liupeng.world/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
